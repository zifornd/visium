---
title: "Cell Atlas annotation"
params:
  seurat:
    - "07-integrate-samples.rds" # So far only for merged, integrated, or single objects (not lists of seurat objects)
  atlas:
    - "data/allen_cortex.rds"
  atlas.group:
    - "subclass"
  vars.to.regress: ["nFeature_RNA"]
  min_cells:
    - 2
  elbow_range:
    - "1:30"
  n.neighbors:
    - 30
  min.dist:
    - 0.3
  nfeatures.sct:
    - 2000
  ncells.sct:
    - 3000
  feature.example: ["Astro", "L2/3 IT", "L4", "L5 PT", "L5 IT", "L6 CT", "L6 IT", "L6b", "Oligo"]
  nfeatures.spatial:
    - 100
  spatial.method:
    - "markvariogram"
  top.features:
    - 5
  r.metric:
    - 5 # standard given by Seurat
  plot_width:
    - 6
  plot_height:
    - 5
---

# Setup

## Parameters

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(
list(
Parameter = "seurat",
Value = params$seurat,
Description = "Seurat object of choice (as .rds object)."
),
list(
Parameter = "atlas",
Value = params$atlas,
Description = "Cell atlas location (as .rds object)."
),
list(
Parameter = "atlas.group",
Value = params$atlas.group,
Description = "Name of group column in atlas meta.data."
),
list(
Parameter = "vars.to.regress",
Value = params$vars.to.regress,
Description = "Variables to regress if required as part of SCT normalisation."
),
list(
Parameter = "min_cells",
Value = params$min_cells,
Description = "Minimum number of cells (spots) required for feature to be expressed in to be included in SCT normalisation. See ?sctransform::vst"
),
list(
Parameter = "elbow_range",
Value = params$elbow_range,
Description = "Number of principle components for dimensionality reduction."
),
list(
Parameter = "nfeatures.sct",
Value = params$nfeatures.sct,
Description = "Number of variable features for SCT normalisation."
),
list(
Parameter = "ncells.sct",
Value = params$ncells.sct,
Description = "Number of cells for SCT normalisation."
),
list(
Parameter = "feature.example",
Value = params$feature.example,
Description = "Name of Cell Atlas annotation feature examples for plotting."
),
list(
Parameter = "nfeatures.spatial",
Value = params$nfeatures.spatial,
Description = "Number of features used for variable spatial feature analysis."
),
list(
Parameter = "spatial.method",
Value = params$spatial.method,
Description = "Method used for variable spatial feature analysis. Choice of markvariogram (Trendseek) or moransi"
),
list(
Parameter = "top.features",
Value = params$top.features,
Description = "Number of spatially variable features to plot onto tissue images."
),
list(
Parameter = "r.metric",
Value = params$r.metric,
Description = "r value at which to report the trans value of the mark variogram. Seurat advised to leave at 5."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockNamedep"> Show/Hide Dependencies</button>  

<div id="BlockNamedep" class="collapse">  

## Dependencies

Restore project dependencies:

```{r}
renv::restore()
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
```

Source user-defined functions:

```{r}
source("scripts/reduceDims.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

</div>

# Processing

## Reading in experiment object

We can read in the `output/06-merge-samples.rds` or `output/07-integrate-samples.rds` seurat object that we saved from previous worksheets (See quarto worksheets `06-merge-samples.qmd` and `07-integrate-samples.qmd` for more details).

Alternatively you can run this step of the workflow on un-merged or un-integrated samples following clustering (`output/05-clustering.rds` and `05-clustering.qmd`) **if** it is only a **single sample**.

::: callout-note
Please take the seurat object of choice and define them as `params$seurat` in @tbl-params.
:::

Read experiment data:

```{r}
seurat <- readRDS(paste0("output/", params$seurat))
```

## Reading in Atlas object

We also need a cell atlas as an rds object for this worksheet.

For the mouse brain we have the atlas as referenced within the seurat tutorial:

-   https://www.dropbox.com/s/cuowvm4vrf65pvq/allen_cortex.rds?dl=1

For liver see (which will be useful for NN projects):

-   https://github.com/joeb-liver/Single_Cell_Liver_Atlas/blob/main/Liver_Atlas_Integration.R

-   https://www.journal-of-hepatology.eu/article/S0168-8278(21)00173-2/fulltext

Read in cell atlas:

```{r}
atlas <- readRDS(params$atlas)
```

## Process Cell Atlas

We process the cell atlas in the same way we would for any single cell experiment - normalisation, pca, and dim reduction.

First we normalise the cell atlas with SCT normalisation. Using a smaller ncells (e.g. ncells = 3000) speeds up normalisation.

```{r}
atlas1 <- SCTransform(atlas, ncells = params$ncells.sct, 
                     variable.features.n = params$nfeatures.sct, 
                     verbose = FALSE) 
```

Add Group to meta.data

```{r}
atlas1@meta.data$Group = atlas1@meta.data[[params$atlas.group]]
```

We then complete PCA on the cell atlas:

```{r}
#| message: false
#| warning: false

atlas1 <- pca(atlas1)
```

::: {.panel-tabset}

## PCA Group

@fig-atlas-pca-class And plot PCAs with labels:

```{r}
#| message: false
#| warning: false
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by atlas.group.
#| label: fig-atlas-pca-class

dimplot(atlas1, reduction = "pca", label = FALSE, 
        group.by = params$atlas.group, title = "PCA-Atlas")
```

## PCA nCounts

@fig-atlas-pca-ncount Plot PCA - nCounts

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by nCount.
#| label: fig-atlas-pca-ncount

featureplot(atlas1, reduction = "pca", label = FALSE, 
            feature = "nCount_RNA", title = "PCA-Atlas")
```

## PCA nFeatures

@fig-atlas-pca-nfeatures Plot PCA - nFeatures

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by nFeature.
#| label: fig-atlas-pca-nfeatures
 
featureplot(atlas1, reduction = "pca", label = FALSE, 
            feature = "nFeature_RNA", title = "PCA-Atlas")
```

:::

## Process Cell Atlas

Using the PCA plots we may also wish to add in variables to regress into the normalisation process following visualisation of the initial PCA. To do this we go back to the original cell atlas object and normalise again using variables to regress.

::: callout-note
Please leave `params$vars.to.regress` as `FALSE` if you do not wish to regress out any additional variables during SCT normalisation. See @tbl-params for more details.
:::

@fig-pca-vars-regress

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data after regression by vars.to.regress.
#| label: fig-pca-vars-regress

if (params$vars.to.regress != FALSE) {
  
  # clean up
  rm(atlas1)
  
  gc()

  atlas <- SCTransform(atlas, ncells = params$ncells.sct, 
                       variable.features.n = params$nfeatures.sct, 
                       verbose = FALSE, 
                       vars.to.regress = params$vars.to.regress)  
  
  atlas <- pca(atlas)
  
  featureplot(atlas, reduction = "pca", label = FALSE, 
              feature = params$vars.to.regress, 
              title = paste0("PCA-Atlas ", params$vars.to.regress))
  
} else {
  
  atlas <- atlas1
  
}
 
```

### Elbow

As in other workflows we use an elbow plot to infer the number of PCs to use downstream.

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Elbow plot Cell Atlas data.
#| label: fig-elbow

elbow(atlas, vline1 = 10, vline2 = 20, title = "Elbow-Atlas")
```

::: callout-note
Please take the number of PCs (e.g. `1:20`) you want as inferred from inspecting the elbow plot and rerun this workflow with the `elbow_range` parameter reset for your needs. See @tbl-params for details. We advise to take a larger PC number than the exact elbow visualised.
:::

Below we take number of PCs from visual inspection defined by the parameter elbow vector `r params$elbow_range`:

```{r}
#| warning: false

elbow_vector <- params$elbow_range
```

And we add that information to the cell atlas object

```{r}
atlas$Elbow <- rep(elbow_vector, nrow(atlas@meta.data))
```

### UMAP

Next we take the results from our PCA and feed this into a non-linear dimensionality reduction technique such as UMAP.

Below we explore the parameter space of UMAPs for our merged seurat samples. Remember that `n.neighbors` should be in the range 5 to 50, and `min.dist` sensible values are in the range 0.001 to 0.5.

```{r}
#| label: Explore-Features-UMAP
#| message: false
#| warning: false
#| results: hide

atlas_1 <- umap(atlas, n.neighbors = 30, min.dist = 0.3)

atlas_2 <- umap(atlas, n.neighbors = 5, min.dist = 0.25)

atlas_3 <- umap(atlas, n.neighbors = 10, min.dist = 0.1)

atlas_4 <- umap(atlas, n.neighbors = 20, min.dist = 0.1)

atlas_5 <- umap(atlas, n.neighbors = 10, min.dist = 0.001)
```

::: {.panel-tabset}

## n.n 30 min.dist 0.3

@fig-umap-30-03 Plot UMAP n.neighbors = 30, min.dist = 0.3

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 30, min.dist = 0.3.
#| label: fig-umap-30-03

dimplot(atlas_1, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 30, min.dist = 0.3")
```

## n.n 5 min.dist 0.25

@fig-umap-05-025 Plot UMAP n.neighbors = 5, min.dist = 0.25

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 5, min.dist = 0.25.
#| label: fig-umap-05-025

dimplot(atlas_2, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 5, min.dist = 0.25")
```

## n.n 10 min.dist 0.1

@fig-umap-10-01 Plot UMAP n.neighbors = 10, min.dist = 0.1

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 10, min.dist = 0.1.
#| label: fig-umap-10-01

dimplot(atlas_3, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 10, min.dist = 0.1")
```

## n.n 20 min.dist 0.1

@fig-umap-20-01 Plot UMAP n.neighbors = 20, min.dist = 0.1

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 20, min.dist = 0.1.
#| label: fig-umap-20-01

dimplot(atlas_4, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 20, min.dist = 0.1")
```

## n.n 10 min.dist 0.001

@fig-umap-10-0001 Plot UMAP n.neighbors = 10, min.dist = 0.001

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 10, min.dist = 0.001.
#| label: fig-umap-10-0001

dimplot(atlas_5, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 10, min.dist = 0.001")
```

:::

Clean up workspace

```{r}
rm(atlas_1, atlas_2, atlas_3, atlas_4, atlas_5)
gc()
```

### Plot UMAP

Please take the values for `n.neighbors` and `min.dist` that are representative across UMAP plots and set them as params.

Below we run UMAP with the paramaters of choice `r paste0("n.neighbors: ", params$n.neighbors, " min.dist: ", params$min.dist)`

```{r}
#| message: false
#| warning: false
#| results: hide

atlas <- umap(atlas, n.neighbors = params$n.neighbors, min.dist = params$min.dist)
```

As previously discussed it can also be a very useful exploratory data analysis step to look at the UMAP/TSNE coloured by QC values such as overall counts (`nCount_Spatial`) and number of features per spot (`nFeature_Spatial`). The idea here is that a cluster may be driven by a technical reason such as a difference in library size which could be amenable to normalisation approaches - or should be interpreted with caution downstream (some biological regions are also known to reliably have low counts and this may be evident).

Below we plot a UMAP with chosen params coloured by `r params$atlas.group`, `nCount_RNA` and `nFeature_RNA`

::: {.panel-tabset}

## UMAP Groups

@fig-umap-chosen-atlas-group Plot UMAP Atlas Group

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params by atlas.group.
#| label: fig-umap-chosen-atlas-group

# the annotation is stored in the 'subclass' column of object metadata
DimPlot(atlas, group.by = params$atlas.group, label = TRUE)
```

## UMAP nCount_RNA

@fig-umap-chosen-ncounts Plot UMAP nCount Atlas

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params nCounts.
#| label: fig-umap-chosen-ncounts

featureplot(atlas, reduction = "umap",label =  FALSE, 
            feature = "nCount_RNA", title = "UMAP-Atlas")
```


## UMAP nFeature_RNA

@fig-umap-chosen-nfeature Plot UMAP nFeature Atlas

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params nFeatures.
#| label: fig-umap-chosen-nfeature

featureplot(atlas, reduction = "umap", label = FALSE, 
            feature = "nFeature_RNA", title = "UMAP-Atlas")
```
:::

## Find Anchors

Next we apply 'anchor'-based integration implemented by seurat which allows for the transfer of annotations, in a probabilistic manner, from a cell atlas reference set to our spatial query data set.

Please see https://satijalab.org/seurat/articles/integration_mapping.html for more details.

Below we find transfer anchors

```{r}
#| message: false
#| warning: false

anchors <- FindTransferAnchors(reference = atlas, 
                               query = seurat, 
                               normalization.method = "SCT")
```

Next we transfer those a anchors

```{r}
#| message: false
#| warning: false

# Get dimensions required
dims <- as.numeric(strsplit(params$elbow_range, ":")[[1]])[1]:as.numeric(strsplit(params$elbow_range, ":")[[1]])[2]

predictions.assay <- TransferData(anchorset = anchors, 
                                  refdata = atlas@meta.data[[params$atlas.group]], 
                                  prediction.assay = TRUE,
                                  weight.reduction = seurat[["pca"]], 
                                  dims = dims)
```

And save these predictions as a new assay within our seurat object.

```{r}
seurat[["predictions"]] <- predictions.assay
```

## Plot Cell Atlas Annotations

Now that we have our new annotations from our cell atlas we can plot these annotation onto our tissue images.

Below we plot an example of this:

```{r}
#| fig.width: !expr (params$plot_width + 10)
#| fig.height: !expr (params$plot_height + 10)
#| fig-cap: Spatial plot with predicted Cell Atlas labels.

DefaultAssay(seurat) <- "predictions"

SpatialFeaturePlot(seurat, features = head(params$feature.example, 2), 
                   pt.size.factor = 1.6, ncol = 2, crop = TRUE)
```

## Find Spatially variable Cell Atlas Annotations

As in previous worksheets (`10-spatial-features.qmd`), we can also look at which of these new annotations are spatially variable.

Below we find those annotations that are localised rather than randomly distributed, and we plot those top features below:

```{r}
seurat <- FindSpatiallyVariableFeatures(seurat, assay = "predictions", 
                                        selection.method = params$spatial.method,
                                        features = rownames(seurat), 
                                        r.metric = params$r.metric, 
                                        slot = "data")

top.clusters <- head(SpatiallyVariableFeatures(seurat), params$top.features)

sp <- SpatialPlot(object = seurat, features = top.clusters, ncol = 2)
```

```{r}
#| fig.width: !expr (params$plot_width + 25)
#| fig.height: !expr (params$plot_height + 25)
#| fig-cap: Spatial plot with predicted Cell Atlas labels of those that are spatially variable.
#| label: fig-spatial-variable

wrap_plots(sp)
```

## Plot labels of interest

We can also plot any labels of interest below:

::: callout-note
Please specify any labels of interest as params above @tbl-params
:::

@fig-spatial-interest

```{r}
#| fig.width: !expr (params$plot_width + 25)
#| fig.height: !expr (params$plot_height + 25)
#| fig-cap: Spatial plot with predicted Cell Atlas labels - labels of interest.
#| label: fig-spatial-interest

SpatialFeaturePlot(seurat, features = params$feature.example, 
                   pt.size.factor = 1,  crop = FALSE, alpha = c(0.1, 1))
```

# Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/11-cell-atlas.rds")
```

## Output Description 

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
File = "seurat",
Link = "[seurat](../../output/11-cell-atlas.rds)",
Description = "Seurat object saved as rds object filtered, normalised, dimensionality reduced, clustered, with cell atlas annotations added."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

## Session information 

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>

