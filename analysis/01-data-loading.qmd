---
title: "Data loading"
params:
    prefix:
      - "data/"
    files:
      - "Visium_FFPE_Mouse_Brain_filtered_feature_bc_matrix.h5"
    metrics:
      - "Visium_FFPE_Mouse_Brain_metrics_summary.csv"
    sample:
      - "Visium_FFPE_Mouse_Brain"
    image:
      - "Visium_FFPE_Mouse_Brain_image"
    slide:
      - "V11J26-127-B1"
    group:
      - "group1"
    area:
      - "B1"
    index:
      - "SI-TS-B7"
    marker:
    - "Foxg1"
---

# Setup

```{r, setup, include=FALSE}
# knitr::opts_knit$set(root.dir = "C:/Users/Ben/Documents/GitHub/visium")
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Source user-defined functions:

```{r}
source("scripts/loadInSpatial.R")
```

# Processing

## Reading in

Load in experiment object with all samples as a list

For details on test data set please see:

https://www.10xgenomics.com/resources/datasets/adult-mouse-brain-ffpe-1-standard-1-3-0

```{r}
seurat <- lapply(params$sample, loadInSpatial, prefix = params$prefix,
                 metadata = params, saveout = F, filename = params$files)

names(seurat) <- params$sample
```

## Filtering

Take only genes with non zero counts across all samples

```{r}
#| eval: true

seurat <- lapply(seurat, function(x) {x[rowSums(x) > 0, ]})
```

Remove "DEPRECATED-" genes

```{r}
#| eval: true

seurat <- lapply(seurat, function(x) {x[!grepl("DEPRECATED", rownames(x)), ]})
```

Test genes of interest still in final expression matrix

```{r}
#| results: false
#| echo: false

lapply(seurat, function(x) {stopifnot(colSums(FetchData(x, vars = params$marker)) > 0)})
```

## Reading in metrics

Load in extra html output

```{r}
metrics <- sapply(params$sample, collectMetrics, prefix = params$prefix,
                  filename = params$metrics)
```

Ready df

```{r}
# Transpose following collection of metrics
metrics <- as.data.frame(t(metrics))

# Make Sample id col character (column 1)
metrics[, "Sample.ID"] <- as.character(metrics[, "Sample.ID"])

# Make all other cols numeric
metrics[, 2:ncol(metrics)] <- as.numeric(unlist(metrics[, 2:ncol(metrics)]))
```

# Output

## RDS Output

Save out seurat experiment object

```{r}
saveRDS(seurat, file = "output/01-data-loading.rds")
```

## Metrics output

Save out metrics output

```{r}
write.csv(metrics, file = "output/metrics.csv", quote = F, row.names = F)
```

Print session information:

```{r}
sessionInfo()
```
