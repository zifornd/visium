---
title: "FEA annotation"
params:
  res:
    - "08-marker-detection-res.rds"
  species:
    - "Mus musculus"
  feature:
    - "gene"
  split.res:
    - FALSE
  group:
    - "cluster"
  custom.anno:
    - FALSE
  lfc.col.name:
    - "avg_log2FC"
  padj.col.name:
    - "p_val_adj"
  pval.adj.thres.filter:
    - 0.1
  lfc.thres.filter:
    - 1
  pval.adj.thres.overrep:
    - 0.05
  pval.adj.thres.gsea:
    - 0.05
  plot_width:
    - 10
  plot_height:
    - 10
---

# Setup

Parameter description

```{r}
#| code-fold: true

par <- list(

list(
Parameter = "species",
Value = params$species,
Description = "Species used for the Spatial experiment."
),
list(
Parameter = "feature",
Value = params$feature,
Description = "Name of feature of interest used as input for downstream functional enrichment."
),
list(
Parameter = "split.res",
Value = params$split.res,
Description = "Boolean whether results table should be split further prior to running functional enrichment analysis."
),
list(
Parameter = "group",
Value = params$group,
Description = "Name of group of interest that is used to split results table further prior to running functional enrichment analysis."
),
list(
Parameter = "custom.anno",
Value = params$custom.anno,
Description = "Whether a custom annotation is used."
),
list(
Parameter = "lfc.col.name",
Value = params$lfc.col.name,
Description = "Name of the column which details log2 fold change differences for features of interest between groups of interest."
),
list(
Parameter = "padj.col.name",
Value = params$padj.col.name,
Description = "Name of the column which details adjusted p value associated with log2 fold change."
),
list(
Parameter = "pval.adj.thres.filter",
Value = params$pval.adj.thres.filter,
Description = "Adjusted p value filter threshold used to filter results table prior to overrepresentation analysis."
),
list(
Parameter = "lfc.thres.filter",
Value = params$lfc.thres.filter,
Description = "Log2 fold change threshold used to filter results table prior to overrepresentation analysis."
),
list(
Parameter = "pval.adj.thres.overrep",
Value = params$pval.adj.thres.overrep,
Description = "Adjusted p value filter threshold used to filter results table after overrepresentation analysis is completed."
),
list(
Parameter = "pval.adj.thres.gsea",
Value = params$pval.adj.thres.gsea,
Description = "Adjusted p value filter threshold used to filter results table after GSEA analysis is completed."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
library(AnnotationDbi)
library(clusterProfiler)
library(enrichplot)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(msigdbr)
library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
library(clustree)
library(RColorBrewer)
library(pheatmap)
library(DT)
```

Source user-defined functions:

```{r}
source("scripts/annotate.R")
source("scripts/functionalEnrichment.R")
```

Read experiment data:

```{r}
res <- readRDS(paste0("output/", params$res))
```

```{r}
cells_genesets <- msigdbr(species = params$species, category = "C8")
hallmarks_genesets <- msigdbr(species = params$species, category = "H")
```

```{r}
cells_genesets_t2g <- cells_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
hallmarks_genesets_t2g <- hallmarks_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
```

```{r}
custom_genesets_t2g <- NULL

if (params$custom.anno != FALSE) {

  custom_genesets <- read.table(params$custom.anno, header = TRUE, sep = ",", quote = F)
  custom_genesets_t2g <- custom_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
}
```

# Processing

## Prepare results table

Filter table for overrep and output vector gene names

```{r}
#| message: false
#| warning: false
#| results: hide

vector_res_overrep <- lapply(res, parse_res, group = params$group, 
                             p_adj = params$pval.adj.thres.filter, 
                             lfc = params$lfc.thres.filter, 
                             type = "overrep", 
                             lfc_name = params$lfc.col.name, 
                             padj_name = params$padj.col.name, 
                             gene_id_name = params$feature, 
                             split.res = params$split.res)

```

Rank table for gsea and output named vector ranked by lfc

```{r}
#| message: false
#| warning: false
#| results: hide

vector_res_gsea <- lapply(res, parse_res, group = params$group, 
                          type = "gsea", lfc_name = params$lfc.col.name, 
                          padj_name = params$padj.col.name, 
                          gene_id_name = params$feature, 
                          split.res = params$split.res)

```

## Run FEA

### Enricher

Get Org species

```{r}
if (params$species == "Mus musculus") {
  
  org_species <- "Mm"
  
}
if (params$species == "Homo sapiens") {
  
  org_species <- "Hs"
  
}
```

Perform hypergeometric Samplewise and per param\$group

```{r}
obj_overrep_cells <- lapply(vector_res_overrep, wrap_cp_custom, 
                            term2gene = cells_genesets_t2g, 
                            species = org_species,
                            analysis_type = "overrep", 
                            pval = params$pval.adj.thres.overrep, 
                            padj = params$pval.adj.thres.overrep, 
                            pmethod = "BH")
```

```{r}
obj_overrep_hallmarks <- lapply(vector_res_overrep, wrap_cp_custom, 
                                term2gene = hallmarks_genesets_t2g,
                                species = org_species, 
                                analysis_type = "overrep", 
                                pval = params$pval.adj.thres.overrep, 
                                padj = params$pval.adj.thres.overrep, 
                                pmethod = "BH")
```

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  obj_overrep_hallmarks <- lapply(vector_res_overrep, wrap_cp_custom, 
                                  term2gene = custom_genesets_t2g, 
                                  species = org_species,
                                  analysis_type = "overrep",
                                  pval = params$pval.adj.thres.overrep, 
                                  padj = params$pval.adj.thres.overrep, 
                                  pmethod = "BH")
}
```

Parse cp object

```{r}
res_overrep_cells <- lapply(obj_overrep_cells, wrap_parse_cp_obj,  
                           species = org_species,
                           type = "overrep", 
                           db = "Custom")
```

```{r}
res_overrep_hallmarks <- lapply(obj_overrep_hallmarks, wrap_parse_cp_obj, 
                           species = org_species, 
                           type = "overrep", 
                           db = "Custom")
```

```{r}
if(!is.null(custom_genesets_t2g)){
  res_overrep_hallmarks <- lapply(obj_overrep_hallmarks, wrap_parse_cp_obj, 
                            species = org_species, 
                            type = "overrep", 
                           db = "Custom")
}
```

#### Interactive results

```{r}
# Only take final level of results table from list
res_overrep_cells <- unlist(res_overrep_cells, recursive = FALSE)

# remove empty elements for clusters without any significant results
res_overrep_cells <- res_overrep_cells[sapply(res_overrep_cells, nrow) > 0]

# bind into single results table
resbind_overrep_cells <- bind_rows(res_overrep_cells, .id = params$group)

# Plot as interactive table
DT::datatable(resbind_overrep_cells, class = 'cell-border stripe', 
              extensions = 'Buttons', rownames = FALSE, 
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(8,10),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

```{r}
# Only take final level of results table from list
res_overrep_hallmarks <- unlist(res_overrep_hallmarks, recursive = FALSE)

# remove empty elements for clusters without any significant results
res_overrep_hallmarks <- res_overrep_hallmarks[sapply(res_overrep_hallmarks, nrow) > 0]

# bind into single results table
resbind_overrep_hallmarks <- bind_rows(res_overrep_hallmarks, .id = params$group)

# Plot as interactive table
DT::datatable(resbind_overrep_hallmarks, class = 'cell-border stripe', 
              extensions = 'Buttons', rownames = FALSE, 
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(8,10),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

```{r}
if (!is.null(custom_genesets_t2g)) {

  # Only take final level of results table from list
  res_overrep_custom <- unlist(res_overrep_custom, recursive = FALSE)

  # remove empty elements for clusters without any significant results
  res_overrep_custom <- res_overrep_custom[sapply(res_overrep_custom, nrow) > 0]

  # bind into single results table
  resbind_overrep_custom <- bind_rows(res_overrep_custom, .id = params$group)

  # Plot as interactive table
  DT::datatable(resbind_overrep_custom, class = 'cell-border stripe', 
                extensions = 'Buttons', rownames = FALSE, 
                options = list(
                  dom = 'Bfrtip',
                  buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                  pageLength = 5,
                  columnDefs = list(
                    list(targets = c(8,10),
                         render = JS(
                           "function(data, type, row, meta) {",
                           "return type === 'display' && data.length > 6 ?",
                           "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                           "}")))),
                filter = "top")
}
```

#### Save out as CSV

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_overrep_cells), function(x, res_overrep_cells) {
  
  write.csv(res_overrep_cells[[x]], 
            file = paste0("output/", x, "-Cells-Overrep_Clusters.csv"))
  
  }, res_overrep_cells = res_overrep_cells)
```

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_overrep_hallmarks), function(x, res_overrep_hallmarks) {
  
  write.csv(res_overrep_hallmarks[[x]], 
            file = paste0("output/", x, "-Hallmarks-Overrep_Clusters.csv"))
  
  }, res_overrep_hallmarks = res_overrep_hallmarks)
```

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

  lapply(names(res_overrep_custom), function(x, res_overrep_custom) {
    
    write.csv(res_overrep_custom[[x]], 
              file = paste0("output/", x, "-Custom-Overrep_Clusters.csv"))
    
    }, res_overrep_custom = res_overrep_custom)
}
```

### GSEA

Perform GSEA Samplewise and per param\$group

```{r}
obj_gsea_cells <- lapply(vector_res_gsea, wrap_cp_custom, 
                         term2gene = cells_genesets_t2g,
                         analysis_type = "gsea",
                         pval = params$pval.adj.thres.gsea, 
                         padj = params$pval.adj.thres.gsea, 
                         pmethod = "BH")
```

```{r}
obj_gsea_hallmarks <- lapply(vector_res_gsea, wrap_cp_custom, 
                             term2gene = hallmarks_genesets_t2g, 
                             analysis_type = "gsea", 
                             pval = params$pval.adj.thres.gsea, 
                             padj = params$pval.adj.thres.gsea, 
                             pmethod = "BH")
```

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  obj_gsea_custom <- lapply(vector_res_gsea, wrap_cp_custom, 
                            term2gene = custom_genesets_t2g, 
                            analysis_type = "gsea", 
                            pval = params$pval.adj.thres.gsea, 
                            padj = params$pval.adj.thres.gsea, 
                            pmethod = "BH")
  }
```

Parse cp object

```{r}
res_gsea_cells <- lapply(obj_gsea_cells, wrap_parse_cp_obj,  
                         species = org_species,
                         type = "gsea",
                         db = "Custom")
```

```{r}
res_gsea_hallmarks <- lapply(obj_gsea_hallmarks, wrap_parse_cp_obj,
                             species = org_species,
                             type = "gsea",
                             db = "Custom")
```

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  res_gsea_hallmarks <- lapply(obj_gsea_hallmarks, wrap_parse_cp_obj,
                               species = org_species,
                               type = "gsea",
                               db = "Custom")
  }
```

#### Interactive results

```{r}
# Only take final level of results table from list
res_gsea_cells <- unlist(res_gsea_cells, recursive = FALSE)

# remove empty elements for clusters without any significant results
res_gsea_cells <- res_gsea_cells[sapply(res_gsea_cells, nrow) > 0]

# bind into single results table
resbind_gsea_cells <- bind_rows(res_gsea_cells, .id = params$group)

DT::datatable(resbind_gsea_cells, class = 'cell-border stripe',
              extensions = 'Buttons', rownames = FALSE,
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(11,12),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

```{r}
# Only take final level of results table from list
res_gsea_hallmarks <- unlist(res_gsea_hallmarks, recursive = FALSE)

# remove empty elements for clusters without any significant results
res_gsea_hallmarks <- res_gsea_hallmarks[sapply(res_gsea_hallmarks, nrow) > 0]

# bind into single results table
resbind_gsea_hallmarks <- bind_rows(res_gsea_hallmarks, .id = params$group)

DT::datatable(resbind_gsea_hallmarks, class = 'cell-border stripe',
              extensions = 'Buttons', rownames = FALSE,
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(11,12),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

```{r}
if (!is.null(custom_genesets_t2g)) {

  # Only take final level of results table from list
  res_gsea_custom <- unlist(res_gsea_custom, recursive = FALSE)

  # remove empty elements for clusters without any significant results
  res_gsea_custom <- res_gsea_custom[sapply(res_gsea_custom, nrow) > 0]

  # bind into single results table
  resbind_gsea_custom <- bind_rows(res_gsea_custom, .id = params$group)

  DT::datatable(resbind_gsea_custom, class = 'cell-border stripe',
                extensions = 'Buttons', rownames = FALSE,
                options = list(
                  dom = 'Bfrtip',
                  buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                  pageLength = 5,
                  columnDefs = list(
                    list(targets = c(11,12),
                         render = JS(
                           "function(data, type, row, meta) {",
                           "return type === 'display' && data.length > 6 ?",
                           "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                           "}")))),
                filter = "top")
  }
```

#### Save out as CSV

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_gsea_cells), function(x, res_gsea_cells) {
  
  write.csv(res_gsea_cells[[x]], 
            file = paste0("output/", x, "-Cells-GSEA_Clusters.csv"))
  
  }, res_gsea_cells = res_gsea_cells)
```

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_gsea_hallmarks), function(x, res_gsea_hallmarks) {
  
  write.csv(res_gsea_hallmarks[[x]], 
            file = paste0("output/", x, "-Hallmarks-GSEA_Clusters.csv"))
  
  }, res_gsea_hallmarks = res_gsea_hallmarks)
```

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {
  
  lapply(names(res_gsea_custom), function(x, res_gsea_custom) {
    
    write.csv(res_gsea_custom[[x]], 
              file = paste0("output/", x, "-Custom-GSEA_Clusters.csv"))
    
    }, res_gsea_custom = res_gsea_custom)
}
```

### Plot output

#### Barplots

For Overrep

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_overrep_cells), function(x, res_overrep_cells){ 
  
  plot_barplot(res_overrep_cells[[x]], 
               colnames_select = c("Description", "p.adjust", "GeneRatio"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_overrep_cells = res_overrep_cells)
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: (params$plot_height + 5)
#| fig-cap: Barplot Ovverepresentation analysis Msigdb C8

wrap_plots(barplots, ncol = 2)
```

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_overrep_hallmarks), function(x, res_overrep_hallmarks){ 
  
  plot_barplot(res_overrep_hallmarks[[x]], 
               colnames_select = c("Description", "p.adjust", "GeneRatio"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_overrep_hallmarks = res_overrep_hallmarks)
```

```{r}
#| fig.width: (params$plot_width + 1)
#| fig.height: (params$plot_height - 5)
#| fig-cap: Barplot Ovverepresentation analysis Msigdb Hallmarks

wrap_plots(barplots, ncol = 2)
```

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {
  
  barplots <- lapply(names(res_overrep_custom), function(x, res_overrep_custom){ 
    
    plot_barplot(res_overrep_custom[[x]], 
                 colnames_select = c("Description", "p.adjust", "GeneRatio"), 
                 colour = "steelblue", 
                 title = x, 
                 x = "-log10(Adjusted P.value)", 
                 y = "Term",
                 top = 5)
    
    }, res_overrep_custom = res_overrep_custom)
  
}
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: params$plot_height
#| fig-cap: Barplot Ovverepresentation analysis Custom geneset

if (!is.null(custom_genesets_t2g)) {
  
  wrap_plots(barplots, ncol = 2)
  
}
```

For GSEA

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_gsea_cells), function(x, res_gsea_cells){
  
  plot_barplot(res_gsea_cells[[x]], 
               colnames_select = c("Description", "p.adjust", "NES"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_gsea_cells = res_gsea_cells)
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: (params$plot_height + 3)
#| fig-cap: Barplot GSEA Msigdb C8

wrap_plots(barplots, ncol = 2)
```

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_gsea_hallmarks), function(x, res_gsea_hallmarks){ 
  
  plot_barplot(res_gsea_hallmarks[[x]],
               colnames_select = c("Description", "p.adjust", "NES"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_gsea_hallmarks = res_gsea_hallmarks)
```

```{r}
#| fig.width: (params$plot_width + 2)
#| fig.height: (params$plot_height - 3)
#| fig-cap: Barplot GSEA Msigdb Hallmarks

wrap_plots(barplots, ncol = 2)
```

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

  barplots <- lapply(names(res_gsea_custom), function(x, res_gsea_custom){ 
    
    plot_barplot(res_gsea_custom[[x]], 
                 colnames_select = c("Description", "p.adjust", "NES"), 
                 colour = "steelblue", 
                 title = x, 
                 x = "-log10(Adjusted P.value)", 
                 y = "Term", 
                 top = 5)
    
    }, res_gsea_custom = res_gsea_custom)
}
```

```{r}
#| fig.width: params$plot_width
#| fig.height: params$plot_height
#| fig-cap: Barplot GSEA Custom geneset

if (!is.null(custom_genesets_t2g)) {

wrap_plots(barplots, ncol = 2)
  
}
```

#### GSEA enrichment

For GSEA

```{r}
#| message: false
#| warning: false
#| results: hide

enrichplots <- lapply(names(unlist(obj_gsea_cells, recursive = F)), function(x, obj_gsea_cells){
  
  plot_fea_results(obj_gsea_cells[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_cells = unlist(obj_gsea_cells, recursive = F))
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Msigdb C8

wrap_plots(enrichplots)
```

```{r}
#| message: false
#| warning: false
#| results: hide

enrichplots <- lapply(names(unlist(obj_gsea_hallmarks, recursive = F)), function(x, obj_gsea_hallmarks) {
  
  plot_fea_results(obj_gsea_hallmarks[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_hallmarks = unlist(obj_gsea_hallmarks, recursive = F))
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Msigdb Hallmarks

wrap_plots(enrichplots)
```

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

enrichplots <- lapply(names(unlist(obj_gsea_custom, recursive = F)), function(x, obj_gsea_custom) {
  
  plot_fea_results(obj_gsea_custom[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_custom = unlist(obj_gsea_custom, recursive = F))
}
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Custom geneset

if (!is.null(custom_genesets_t2g)) {

  wrap_plots(enrichplots)
  
}
```

# Output

Save experiment object:

```{r}
if (!is.null(custom_genesets_t2g)) {

  res_anno <- list(res_overrep_cells = res_overrep_cells, 
                   res_overrep_hallmarks = res_overrep_hallmarks, 
                   res_overrep_custom = res_overrep_custom, 
                   res_gsea_cells = res_gsea_cells, 
                   res_gsea_hallmarks = res_gsea_hallmarks, 
                   res_gsea_custom = res_gsea_custom)

} else {

  res_anno <- list(res_overrep_cells = res_overrep_cells, 
                   res_overrep_hallmarks = res_overrep_hallmarks, 
                   res_gsea_cells = res_gsea_cells, 
                   res_gsea_hallmarks = res_gsea_hallmarks)
}
```

```{r}
saveRDS(res_anno, file = "output/09-annotation.rds")
```

Print session information:

```{r}
sessionInfo()
```
