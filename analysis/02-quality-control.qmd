---
title: "Quality control"
params:
    protocol:
      - "FF" # Fresh frozen as FF, or FFPE
    custom_sample_names: [Sagittal_Anterior_1, Sagittal_Anterior_2, Sagittal_Posterior_1, Sagittal_Posterior_2] # Set as null if not wanted
---

# Setup

## Parameters

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "protocol",
Value = params$protocol,
Description = "Name of the 10x Visium protocol used - either FFPE or FF (Fresh Frozen)."
),
list(
Parameter = "custom_sample_names",
Value = params$custom_sample_names,
Description = "Custom names of samples for plotting."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockNamedep"> Show/Hide Dependencies</button>  

<div id="BlockNamedep" class="collapse">  

## Dependencies

Restore project dependencies:

```{r}
renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
```

Source user-defined functions:

```{r}
source("scripts/loadInSpatial.R")
source("scripts/plotQC.R")
source("scripts/filterCells.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

</div>

# Processing

## Reading in

### Reading in experiment object

We can read in the seurat object that we loaded in from the previous worksheet (See quarto worksheet `01-data-loading.qmd` for more details).

```{r}
seurat <- readRDS("output/01-data-loading.rds")
```

We also need to collect the QC metrics from the seurat objects ready for visualization.

```{r}
combinedQC <- collectQC(seurat)
```

### Reading in QC metrics csv

We can also read in the qc metrics that we collected from the 10x visium output in the same `01-data-loading.qmd` worksheet. Much of the plotting for this analysis will focus on these values.

```{r}
metrics <- read.csv("output/metrics.csv")
```

## QC Metrics

### nCounts

Below we plot violin plots for `nCounts_Spatial` metric from 10x output and represents the number of total UMI barcodes counted per spot - the higher the count the more RNA content in each spot. If you are familiar with the OSCA single cell workflow this is equivalent to the `sum` of counts for a single cell experiment. For single cell Seurat workflow this is equivalent to `nCounts_RNA`.

Ideally, we are looking for well enriched samples with good number of overall UMI counts across spots (median \~20k UMI is fine), however more importantly we are looking for low count outliers - e.g. Is the distribution particularly skewed? Do we need to filter a low quality group of spots with low counts represented by a bimodal distribution etc.?

```{r}
meta <- c("Sample", "Group", "Slide", "Area")

custom_names <- get_custom_names(custom_names = c("nCount_Spatial", "nFeature_Spatial"), original_names = c("nCount_Spatial", "nFeature_Spatial"), 
                                 custom_sample_names = params$custom_sample_names, sample_ids = metrics$Sample.ID) 

vlns <- lapply(meta, function(x, combinedQC, clean_label, custom_lab) {

  violingg(combinedQC, ylab = "nCount_Spatial", colour_by = x, show_median = T, 
           clean = 15, delim = "_", custom_lab = custom_lab, clean_label = clean_label)

  }, combinedQC = combinedQC, clean_label = custom_label, custom_lab = custom_names)
```

@fig-ncountsviolin Plot combined nCounts Violin plots:

```{r}
#| fig.width: 10
#| fig.height: 8
#| label: fig-ncountsviolin
#| fig-cap: nCounts across samples labelled by possible confounders.
#| warning: false
#| message: false

wrap_plots(vlns)
```

It is also important to look at the distribution of counts across the tissue sample via image map plots. Below we plot our H+E stained histology imaged with `nCounts_Spatial` overlayed. It is normal to see biological variation driving differences in total RNA content and thus areas of the image may have areas of low nCounts. For example, regions containing mostly connective tissue (e.g. in fibrotic/cirrhotic liver) will typically have low UMI counts. In the brain, areas that are depleted for neurons such as cortical white matter, are also known to show low nCounts reproducibly (https://satijalab.org/seurat/articles/spatial_vignette.html).

```{r}
#| message: false
#| warning: false

spatialPlots <- lapply(names(seurat), function(x, seuratList) { 

  SpatialFeaturePlot(seuratList[[x]], features = "nCount_Spatial") + 
    theme(legend.position = "right") + labs(title = x)

  }, seuratList = seurat)
```

@fig-ncountsimage Plot Image map plots for nCounts

```{r}
#| fig.width: 15
#| fig.height: 20
#| label: fig-ncountsimage
#| fig-cap: nCounts across sample images.
#| warning: false
#| message: false

wrap_plots(spatialPlots)
```

### nFeatures

Another important QC measurement we use is the number of features sampled per spot or `nFeatures_Spatial`. In this case the features we are interested in are of course genes, so nFeatures really is the number of genes we have managed to sample per spot. In the OSCA workflow this is `detected` and in a Seurat single cell workflow this is `nFeatures_RNA`. Below we plot violin plots for nFeatures metric from 10x output.

The median number of genes per spot can vary from experiment to experiment depending on the tissue type. Like the example above fibrotic tissue may have few detected and expressed genes as well as low UMI count and so median nFeature can be low in tissues such as cirrhotic liver (although something like \~5k is fine). What we are looking for again is low feature count spots and skewed distributions that may be amenable to filtering.

Ideally we would be able to spend lots of money on sequencing to be able to sample all possible genes - including those lowly expressed genes. This is not always possible however and if a gene of interest is not expressed sequencing saturation plots which come with 10x html output should be inspected further.

```{r}
meta <- c("Sample", "Group", "Slide", "Area")

custom_names <- get_custom_names(custom_names = c("nCount_Spatial", "nFeature_Spatial"), original_names = c("nCount_Spatial", "nFeature_Spatial"), 
                                 custom_sample_names = params$custom_sample_names, sample_ids = metrics$Sample.ID) 

vlns <- lapply(meta, function(x, combinedQC, clean_label, custom_lab) {

  violingg(combinedQC, ylab = "nFeature_Spatial", colour_by = x, 
           show_median = T, clean = 15, delim = "_", custom_lab = custom_lab, 
           clean_label = clean_label)

  }, combinedQC = combinedQC, clean_label = custom_label, custom_lab = custom_names)
```

@fig-nfeaturesviolin Plot combined nFeatures plots:

```{r}
#| fig.width: 10
#| fig.height: 8
#| label: fig-nfeaturesviolin
#| fig-cap: nFeatures across sample images.
#| warning: false
#| message: false

wrap_plots(vlns)
```

As above it is also important to look at the distribution of feature counts across the tissue sample via image map plots. Below we plot our H+E stained histology imaged with `nFeatures_Spatial` overlayed.

```{r}
#| warning: false
#| message: false

spatialPlots <- lapply(names(seurat), function(x, seuratList) { 

  SpatialFeaturePlot(seuratList[[x]], features = "nFeature_Spatial") +
    theme(legend.position = "right") + labs(title = x)

  }, seuratList = seurat)
```

@fig-nfeaturesimage Image map nFeatures:

```{r}
#| fig.width: 15
#| fig.height: 20
#| label: fig-nfeaturesimage
#| fig-cap: nFeatures across sample images.
#| warning: false
#| message: false

wrap_plots(spatialPlots)
```

## Additional QC Metrics

Spaceranger also produces a set of QC values which we have parsed ready for plotting below. These are presented to the user normally within 10x html outputs and we plot these below under the headers specified by 10x - `Sequencing`, `Mapping`, and `Spots`.

### Sequencing

This set of QC values focuses on sequencing QC e.g. total number of reads per sample (`Number.of.Reads`), percentage of valid UMIs (`Valid.UMIs`), the quality of reads and barcodes (`Q30.Bases.in.Barcode`, `Q30.Bases.in.UMI`) per sample.

If you are running FFPE protocol you will also see  `Q30.Bases.in.Probe.Read`, and if you are running FF protocol you will see `Q30 Bases.in.RNA.Read`.

```{r}
metricscols <- c("Valid.Barcodes", "Valid.UMIs", 
                 "Q30.Bases.in.Barcode", "Q30.Bases.in.UMI", 
                 "Sequencing.Saturation")

if (params$protocol == "FFPE") {

  metricscols <- c(metricscols, "Q30.Bases.in.Probe.Read")

} 

if (params$protocol == "FF") {

  metricscols <- c(metricscols, "Q30.Bases.in.RNA.Read")

}

custom_names <- get_custom_names(custom_names = c("Number.of.Reads", metricscols), original_names = c("Number.of.Reads", metricscols), 
                                 custom_sample_names = params$custom_sample_names, sample_ids = metrics$Sample.ID) 

bars <- lapply(c("Number.of.Reads", metricscols), function(x, metrics, clean_label, custom_lab) {
  
  barplotgg(metrics, ylab = x, xlab = "Sample.ID", colour_by = "Sample.ID", 
            clean = 11, delim = "_", xdelim = ".", ydelim = ".", custom_lab = custom_lab, 
            clean_label = clean_label)

  }, metrics = metrics, clean_label = custom_label, custom_lab = custom_names)
```

@fig-qcseq Plot Sequencing QC Barplot

```{r}
#| fig.width: 15
#| fig.height: 12
#| label: fig-qcseq
#| fig-cap: Sequencing QC values.

wrap_plots(bars)
```

We can also summarise some of these values (those that are a %) into a violin plot so that they can be more easily compared across samples.

```{r}
seq_metr <- metrics[,c("Sample.ID", metricscols)]

seq_metr <- melt(seq_metr)

seq_metr$Percentage <- seq_metr$value

seq_metr$QC <- seq_metr$variable
```

One violin zooms into the values of each QC measurement, the other enforces a 0 - 100% y axis.

```{r}
v1 <- violingg(seq_metr, ylab = "Percentage", xlab = "QC", 
               colour_by = "Sample.ID", show_median = T)

v2 <- violingg(seq_metr, ylab = "Percentage", xlab = "QC", 
               colour_by = "Sample.ID", show_median = T, ylim = c(0,1))
```

@fig-qcseqviolin Summary Violin plot

```{r}
#| fig.width: 8
#| fig.height: 8
#| label: fig-qcseqviolin
#| fig-cap: Sequencing QC values summary violin.

wrap_plots(v1, v2, nrow = 2)
```

### Mapping

This set of QC values focuses on mapping QC (mapping to the mouse or human probe set for FFPE protocol) e.g. total number of reads mapped to probe set (`Reads.Mapped.to.Probe.Set`), total number of reads mapped uniquely to probe set (`Reads.Mapped.Confidently.to.Probe.Set`), and total number of reads that mapped uniquely to filtered probe set (those with low predicted off-targets and are no DEPRECATED) (`Reads.Mapped.Confidently.to.the.Filtered.Probe.Set`) per sample if the run is following the FFPE protocol.

Where the samples are run following the Fresh frozen protocol we would expect to assess QC mapping metrics such as `Reads.Mapped.to.Genome`, `Reads.Mapped.Confidently.to.Genome`, `Reads.Mapped.Confidently.to.Intergenic.Regions`, `Reads.Mapped.Confidently.to.Intronic.Regions`, `Reads.Mapped.Confidently.to.Exonic.Regions`, `Reads.Mapped.Confidently.to.Transcriptome`, and `Reads.Mapped.Antisense.to.Gene`.

```{r}
if (params$protocol == "FFPE"){

  metricscols <- c("Reads.Mapped.to.Probe.Set", 
                   "Reads.Mapped.Confidently.to.Probe.Set", 
                   "Reads.Mapped.Confidently.to.the.Filtered.Probe.Set")

  custom_names <- c("Probe.Set", 
                   "Confidently.Probe.Set", 
                   "Confidently.Filtered.Probe.Set")

} 

if (params$protocol == "FF"){


  metricscols <- c("Reads.Mapped.to.Genome", 
                   "Reads.Mapped.Confidently.to.Genome", 
                   "Reads.Mapped.Confidently.to.Intergenic.Regions", 
                   "Reads.Mapped.Confidently.to.Intronic.Regions", 
                   "Reads.Mapped.Confidently.to.Exonic.Regions", 
                   "Reads.Mapped.Confidently.to.Transcriptome", 
                   "Reads.Mapped.Antisense.to.Gene")

  custom_names <- c("Mapped.Genome", 
                   "Mapped.Confidently.Genome", 
                   "Mapped.Confidently.Intergenic", 
                   "Mapped.Confidently.Intronic", 
                   "Mapped.Confidently.Exonic", 
                   "Mapped.Confidently.Transcriptome", 
                   "Mapped.Antisense.to.Gene")

}

custom_names <- get_custom_names(custom_names = custom_names, original_names = metricscols, 
                                 custom_sample_names = params$custom_sample_names, sample_ids = metrics$Sample.ID) 

bars <- lapply(metricscols, function(x, metrics, clean_label, custom_lab) {
  
  barplotgg(metrics, ylab = x, xlab = "Sample.ID", colour_by = "Sample.ID", 
            clean = 15, delim = "_", xdelim = ".", ydelim = ".", custom_lab = custom_lab,
            clean_label = clean_label)

  }, metrics = metrics, clean_label = custom_label, custom_lab = custom_names) # was clean_label trim_label
```

@fig-qcmapping Plot a barplot of all mapping based QC:

```{r}
#| fig.width: 22
#| fig.height: 10
#| label: fig-qcmapping
#| fig-cap: Mapping QC values.

wrap_plots(bars, nrow = 2)
```

We can also summarise some of these values (those that are a %) into a violin plot so that they can be more easily compared across samples.

```{r}
#| message: false
#| warning: false
custom_names <- c("Percentage",
                 "Mapped.Genome", 
                 "Mapped.Confidently.Genome", 
                 "Mapped.Confidently.Intergenic", 
                 "Mapped.Confidently.Intronic", 
                 "Mapped.Confidently.Exonic", 
                 "Mapped.Confidently.Transcriptome", 
                 "Mapped.Antisense.to.Gene")

names(custom_names) <- c("Percentage", metricscols)

map_metr <- metrics[,c("Sample.ID", metricscols)]

map_metr <- melt(map_metr)

map_metr$Percentage <- map_metr$value

map_metr$QC <- map_metr$variable
```

One violin zooms into the values of each QC measurement, the other enforces a 0 - 100% y axis.

```{r}
v1 <- violingg(map_metr, ylab = "Percentage", xlab = "QC", 
               colour_by = "Sample.ID", show_median = T, clean = 20, 
               custom_lab = custom_names, clean_label = custom_label)

v2 <- violingg(map_metr, ylab = "Percentage", xlab = "QC", 
               colour_by = "Sample.ID", show_median = T, ylim = c(0,1), 
               clean = 20, custom_lab = custom_names, clean_label = custom_label)
```

@fig-qcmappingviol Summary Violin Plot

```{r}
#| fig.width: 8
#| fig.height: 8
#| label: fig-qcmappingviol
#| fig-cap: Mapping QC values violin.

wrap_plots(v1, v2, nrow = 2)
```

### Spots

This set of QC values focuses on spot associated QC e.g. total number of spots under the tissue sample (`Number.of.Spots.Under.Tissue`), the mean reads per spot (`Mean.Reads.per.Spot`) which is like mean nCounts, and the median genes per spot (`Median.Genes.per.Spot`) which is similar to median nFeatures.

```{r}
metricscols <- c("Number.of.Spots.Under.Tissue", "Mean.Reads.per.Spot", 
                 "Median.Genes.per.Spot")

custom_names <- get_custom_names(custom_names = metricscols, original_names = metricscols, 
                                 custom_sample_names = params$custom_sample_names, sample_ids = metrics$Sample.ID) 

bars <- lapply(metricscols, function(x, metrics, clean_label, custom_label) {

  barplotgg(metrics, ylab = x, xlab = "Sample.ID", colour_by = "Sample.ID",
            clean = 11, delim = "_", xdelim = ".", ydelim = ".", custom_lab = custom_label,
            clean_label = clean_label)

  }, metrics = metrics, clean_label = custom_label, custom_lab = custom_names)
```

@fig-qcspot Plot a barplot of all spot based QC (as they are not on the same scale we cannot summarise them as violin plots).

```{r}
#| fig.width: 20
#| fig.height: 6
#| label: fig-qcspot
#| fig-cap: Spot QC values.

wrap_plots(bars)
```

## Spot Filtering

### Remove spots based on location

Sometimes there are regionally located clusters of low quality spots which may be filtered prior to downstream analysis. For example - the edges of slides which can be easily filtered as long as they are not clearly associated with a biological signal. This will need to be completed on a per sample basis - below is an example:

e.g. image at index 1

Look at ranges of x y values for easier estimation of coordinates

```{r}
#| eval: false

image_key <- seurat[[1]]@images[[1]]@key
  
# fetch xy axis data frame
spatial_df <- FetchData(seurat[[1]], 
                        vars = c(paste0(image_key, "imagerow"), 
                                 paste0(image_key, "imagecol")))

print(c("Y axis range:", range(spatial_df[,1])))
print(c("X axis range:",range(spatial_df[,2])))
```

Filter out those low quality spots which are located peripherally.

```{r}
#| eval: false

seurat_1 <- filterByXY(seurat[[1]], x1 = 85.00408692 , x2 = 520, 
                       y1 = 53.49836036, y2 = 513.829758624)
```

Show which cells have been filtered.

```{r}
#| eval: false

labels <- SpatialDimPlot(seurat[[1]],cells.highlight = colnames(seurat_1))
```

Plot alongside original UMI count plot.

```{r, message = FALSE, warning = FALSE}
#| eval: false
#| message: false
#| warning: false

counts <- SpatialFeaturePlot(seurat[[1]], features = "nCount_Spatial") + 
          theme(legend.position = "right")
```

Plot together.

```{r, fig.width = 6, fig.height = 10}
#| eval: false
#| fig.width: 6
#| fig.height: 10

wrap_plots(counts, labels, ncol = 1)
```

Replace old seurat object with new.

```{r}
#| eval: false

seurat[[1]] = NULL

seurat[[1]] = seurat_1
```

### Remove spots with zero counts

Normalisation approaches that we use (e.g. SCT transform) require non zero counts for each spot and will complain when they attempt to log transform spots with zero counts - so we filter 0 count spots by default.

We can plot those spots with zero counts first to see how removing them will change what available spots we will have and how they are spatially distributed (Grey = 0, Red \> 0):

```{r}
# Plot filtered spots
wrap_plots(lapply(seurat, filterByPlot, threshold = 0, by = "nCount_Spatial", 
                  direction = "up"))
```

We can then remove these spots:

```{r}
seurat <- lapply(seurat, filterBy, threshold = 0, by = "nCount_Spatial", 
                 direction = "up")
```

# Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/02-quality-control.rds")
```

## Output Description 

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
File = "seurat",
Link = "[seurat](../../output/02-quality-control.rds)",
Description = "Seurat object saved as rds object filtered for common QC values."
)

)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

## Session information 

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>
