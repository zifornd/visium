---
title: "Data loading"
params:
    prefix:
      - "data/"
    metrics:
      - "Visium_FFPE_Mouse_Brain_metrics_summary.csv"
    marker:
    - "Hoxa5"
    sample.sheet:
    - "Visium_FFPE_Mouse_Brain_Samples.csv"
---

## Setup

### Parameters

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "prefix",
Value = params$prefix,
Description = "Name of data folder for 10x spatial output."
),
list(
Parameter = "metrics",
Value = params$metrics,
Description = "Name of metrics csv file containing qc data for processed samples."
),
list(
Parameter = "marker",
Value = params$marker,
Description = "Name of marker gene expected to be expressed in data."
),
list(
Parameter = "sample.sheet",
Value = params$sample.sheet,
Description = "Name of sample sheet with details of samples profiled. Should be within 10x data folder defined in params$prefix."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

:::{.callout-tip}
You can supply these paramaters upon render.
:::

```{r, setup, include=FALSE}
# knitr::opts_knit$set(root.dir = "C:/Users/Ben/Documents/GitHub/visium")
```

### Dependencies

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Source user-defined functions:

```{r}
source("scripts/loadInSpatial.R")
```

:::{.callout-note}
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

## Processing

### Reading in sample sheet

Read in sample sheet which contains all meta data required for processing.

```{r}
metadata <- read.csv(paste0(params$prefix, params$sample.sheet))
```

### Reading in experiment object

Load in experiment object with all samples as a list.

Here we direct our notebook at a folder within our project "`/data`" which contains the spaceranger "`/Visium_FFPE_Mouse_Brain/outs`" output folder which is the result of a successful spaceranger run and the root of spaceranger output files. We recommend specifying `filtered_feature_bc_matrix` rather than `raw_feature_bc_matrix` within the sample sheet for ease of analysis (unless spaceranger is filtering genes of interest - see below)

For the expected output from a spaceranger run please see:

-   https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/using/count-ffpe

For details on test data set please see:

-   https://www.10xgenomics.com/resources/datasets/adult-mouse-brain-ffpe-1-standard-1-3-0

```{r}
seurat <- lapply(metadata$sample, loadInSpatial, prefix = params$prefix,
                 metadata = metadata, saveout = F, filename = metadata$files)

names(seurat) <- metadata$sample
```

### Filtering

#### Take only genes with non zero counts across all samples

Spaceranger by default does some filtering where we take the "`filtered_feature_bc_matrix`" output which is recommended.

1.  Spaceranger will only take spots which overlay tissue (non empty spots).

2.  For those Visium FFPE samples it will filter all genes in the supplied probe set without the "include = TRUE" column of the probe set reference csv file.

For details on the FFPE probe set please see:

-   https://support.10xgenomics.com/spatial-gene-expression-ffpe/probe-sets/probe-set-file-descriptions/#probe_set_csv_file

Some additional filtering is useful to us however - for example zero count genes are of no use for downstream analysis so we can filter them

```{r}
#| eval: true

seurat <- lapply(seurat, function(x) {x[rowSums(x) > 0, ]})
```

#### Remove "DEPRECATED-" genes

For FFPE analyses by default these genes are removed - however if an unfiltered feature barcode matrix is supplied following the use of the **`--no-probe-filter`** tag DEPRECATED probes must be removed prior to downstream analysis.

For more details on how probe filtering occurs for FFPE protocol upstream with spaceranger please see "**Probe Filtering For FFPE**" section:

-   https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/algorithms/overview

And also If you need to change spaceranger filtering for FFPE probes:

-   https://kb.10xgenomics.com/hc/en-us/articles/4405412716301

```{r}
#| eval: true

seurat <- lapply(seurat, function(x) {x[!grepl("DEPRECATED", rownames(x)), ]})
```

#### Test genes of interest still in final expression matrix

If a the experiment has been completed with a number of marker genes in mind - perform an early check to ensure this gene is expressed following filtering - e.g. Is this gene within the probe list if experiment following the FFPE protocol? Does this gene have a non deprecated probe? Is it expressed?

Further discussion required if chosen marker genes are not expressed at this point.

```{r}
#| results: false
#| echo: true

lapply(seurat, function(x) {stopifnot(colSums(FetchData(x, vars = params$marker)) > 0)})
```

### Reading in QC metrics

As standard spaceranger produced sample wise QC values. We can use these values to evaluate sample wise QC ourselves.

```{r}

# Load in extra html output

metrics <- sapply(metadata$sample, collectMetrics, prefix = params$prefix,
                  filename = params$metrics)
```

Parse the output of the data frame prior to output.

```{r}
# Transpose following collection of metrics
metrics <- as.data.frame(t(metrics))

# Make Sample id col character (column 1)
metrics[, "Sample.ID"] <- as.character(metrics[, "Sample.ID"])

# Make all other cols numeric
metrics[, 2:ncol(metrics)] <- as.numeric(unlist(metrics[, 2:ncol(metrics)]))
```

## Output

### RDS Output

Save out seurat experiment object

```{r}
saveRDS(seurat, file = "output/01-data-loading.rds")
```

### Metrics output

Save out metrics output

```{r}
write.csv(metrics, file = "output/metrics.csv", quote = F, row.names = F)
```

Print session information:

```{r}
sessionInfo()
```
