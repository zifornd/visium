---
title: "Cell Atlas annotation"
params:
  seurat:
    - "07-integrate-samples.rds" # So far only for merged, integrated, or single objects
  atlas:
    - "data/allen_cortex.rds"
  atlas.group:
    - "subclass"
  vars.to.regress: ["nFeature_RNA"]
  min_cells:
    - 2
  elbow_range:
    - "1:30"
  n.neighbors:
    - 30
  min.dist:
    - 0.3
  nfeatures.sct:
    - 2000
  ncells.sct:
    - 3000
  feature.example: ["Astro", "L2/3 IT", "L4", "L5 PT", "L5 IT", "L6 CT", "L6 IT", "L6b", "Oligo"]
  nfeatures.spatial:
    - 100
  spatial.method:
    - "markvariogram"
  top.features:
    - 5
  r.metric:
    - 5 # standard given by Seurat
  plot_width:
    - 6
  plot_height:
    - 5
---

# Setup

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(
list(
Parameter = "seurat",
Value = params$seurat,
Description = "Seurat object of choice (as .rds object)."
),
list(
Parameter = "atlas",
Value = params$atlas,
Description = "Cell atlas location (as .rds object)."
),
list(
Parameter = "atlas.group",
Value = params$atlas.group,
Description = "Name of group column in atlas meta.data."
),
list(
Parameter = "vars.to.regress",
Value = params$vars.to.regress,
Description = "Variables to regress if required as part of SCT normalisation."
),
list(
Parameter = "min_cells",
Value = params$min_cells,
Description = "Minimum number of cells (spots) required for feature to be expressed in to be included in SCT normalisation. See ?sctransform::vst"
),
list(
Parameter = "elbow_range",
Value = params$elbow_range,
Description = "Number of principle components for dimensionality reduction."
),
list(
Parameter = "nfeatures.sct",
Value = params$nfeatures.sct,
Description = "Number of variable features for SCT normalisation."
),
list(
Parameter = "ncells.sct",
Value = params$ncells.sct,
Description = "Number of cells for SCT normalisation."
),
list(
Parameter = "feature.example",
Value = params$feature.example,
Description = "Name of Cell Atlas annotation feature examples for plotting."
),
list(
Parameter = "nfeatures.spatial",
Value = params$nfeatures.spatial,
Description = "Number of features used for variable spatial feature analysis."
),
list(
Parameter = "spatial.method",
Value = params$spatial.method,
Description = "Method used for variable spatial feature analysis. Choice of markvariogram (Trendseek) or moransi"
),
list(
Parameter = "top.features",
Value = params$top.features,
Description = "Number of spatially variable features to plot onto tissue images."
),
list(
Parameter = "r.metric",
Value = params$r.metric,
Description = "r value at which to report the trans value of the mark variogram. Seurat advised to leave at 5."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
```

Source user-defined functions:

```{r}
source("scripts/reduceDims.R")
```

Read experiment data:

```{r}
seurat <- readRDS(paste0("output/", params$seurat))
```

Read in cell atlas:

```{r}
atlas <- readRDS(params$atlas)
```

## Processing

### Process Cell Atlas

Normalise ncells = 3000 speeds up normalisation

```{r}
atlas <- SCTransform(atlas, ncells = params$ncells.sct, 
                     variable.features.n = params$nfeatures.sct, 
                     verbose = FALSE) 
```

Add Group to meta.data

```{r}
atlas@meta.data$Group = atlas@meta.data[[params$atlas.group]]
```

PCA

```{r}
#| message: false
#| warning: false

atlas <- pca(atlas)
```

Individual PCA - dimplot

```{r}
#| message: false
#| warning: false
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by atlas.group.

dimplot(atlas, reduction = "pca", label = FALSE, 
        group.by = params$atlas.group, title = "PCA-Atlas")
```

Individual PCA - featureplot ncount

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by nCount.

featureplot(atlas, reduction = "pca", label = FALSE, 
            feature = "nCount_RNA", title = "PCA-Atlas")
```

Individual PCA - featureplot nfeature

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data by nFeature.

featureplot(atlas, reduction = "pca", label = FALSE, 
            feature = "nFeature_RNA", title = "PCA-Atlas")
```

### Process Cell Atlas

Add in variables to regress

```{r}
#| message: false
#| warning: false
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plot Cell Atlas data after regression by vars.to.regress.

if (params$vars.to.regress != FALSE) {
  
  atlas <- SCTransform(atlas, ncells = params$ncells.sct, 
                       variable.features.n = params$nfeatures.sct, 
                       verbose = FALSE, 
                       vars.to.regress = params$vars.to.regress)  
  
  atlas <- pca(atlas)
  
  featureplot(atlas, reduction = "pca", label = FALSE, 
              feature = params$vars.to.regress, 
              title = paste0("PCA-Atlas ", params$vars.to.regress))
  
}
 
```

### Elbow

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Elbow plot Cell Atlas data.

elbow(atlas, vline1 = 10, vline2 = 20, title = "Elbow-Atlas")
```

From visual inspection it looks like the PCs for merged samples should be between 10-20

Define elbow vector:

```{r}
#| warning: false

elbow_vector <- params$elbow_range

print(elbow_vector)
```

Add PC elbow to object

```{r}
atlas$Elbow <- rep(elbow_vector, nrow(atlas@meta.data))
```

### UMAP

n.neighbors should be in the range 5 to 50. 

min.dist sensible values are in the range 0.001 to 0.5.

```{r}
#| label: Explore-Features-UMAP
#| message: false
#| warning: false
#| results: hide

atlas_1 <- umap(atlas, n.neighbors = 30, min.dist = 0.3)

atlas_2 <- umap(atlas, n.neighbors = 5, min.dist = 0.25)

atlas_3 <- umap(atlas, n.neighbors = 10, min.dist = 0.1)

atlas_4 <- umap(atlas, n.neighbors = 20, min.dist = 0.1)

atlas_5 <- umap(atlas, n.neighbors = 10, min.dist = 0.001)
```

UMAP n.neighbors = 30, min.dist = 0.3

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 30, min.dist = 0.3.

dimplot(atlas_1, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 30, min.dist = 0.3")
```

UMAP n.neighbors = 5, min.dist = 0.25

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 5, min.dist = 0.25.

dimplot(atlas_2, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 5, min.dist = 0.25")
```

UMAP n.neighbors = 10, min.dist = 0.1

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 10, min.dist = 0.1.

dimplot(atlas_3, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 10, min.dist = 0.1")
```

UMAP n.neighbors = 20, min.dist = 0.1

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 20, min.dist = 0.1.

dimplot(atlas_4, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 20, min.dist = 0.1")
```

UMAP n.neighbors = 10, min.dist = 0.001

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP plot Cell Atlas n.neighbors = 10, min.dist = 0.001.

dimplot(atlas_5, reduction = "umap", label = TRUE, 
        group.by = params$atlas.group, 
        title = "UMAP-Atlas n.neighbors = 10, min.dist = 0.001")
```

Clean up workspace

```{r}
rm(atlas_1, atlas_2, atlas_3, atlas_4, atlas_5)
gc()
```

### Chosen params UMAP

Run UMAP individual samples for choice of params (standard seems fine):

UMAP n.neighbors = 30, min.dist = 0.3

```{r}
#| message: false
#| warning: false
#| results: hide

print(paste0("n.neighbors: ", params$n.neighbors))

print(paste0("min.dist: ", params$min.dist))

atlas <- umap(atlas, n.neighbors = params$n.neighbors, min.dist = params$min.dist)
```

### Plot Cell Atlas QC

nCount

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params nCounts.

featureplot(atlas, reduction = "umap",label =  FALSE, 
            feature = "nCount_RNA", title = "UMAP-Atlas")
```

nFeature

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params nFeatures.

featureplot(atlas, reduction = "umap", label = FALSE, 
            feature = "nFeature_RNA", title = "UMAP-Atlas")
```

### Plot Cell Atlas by Class

```{r}
#| fig.width: !expr (params$plot_width + 1)
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP Cell Atlas chosen params by atlas.group.

# the annotation is stored in the 'subclass' column of object metadata
DimPlot(atlas, group.by = params$atlas.group, label = TRUE)
```

## Find Anchors

Find Transfer Anchors

```{r}
anchors <- FindTransferAnchors(reference = atlas, 
                               query = seurat, 
                               normalization.method = "SCT")
```

Transfer Anchors

```{r}
# Get dimensions required
dims <- as.numeric(strsplit(params$elbow_range, ":")[[1]])[1]:as.numeric(strsplit(params$elbow_range, ":")[[1]])[2]

predictions.assay <- TransferData(anchorset = anchors, 
                                  refdata = atlas@meta.data[[params$atlas.group]], 
                                  prediction.assay = TRUE,
                                  weight.reduction = seurat[["pca"]], 
                                  dims = dims)
```

Save new assay

```{r}
seurat[["predictions"]] <- predictions.assay
```

## Plot Cell Atlas Annotations

Example:

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Spatial plot with predicted Cell Atlas labels.

DefaultAssay(seurat) <- "predictions"
SpatialFeaturePlot(seurat, features = head(params$feature.example, 2), 
                   pt.size.factor = 1.6, ncol = 2, crop = TRUE)
```

## Find Spatially variable Cell Atlas Annotations

```{r}
seurat <- FindSpatiallyVariableFeatures(seurat, assay = "predictions", 
                                        selection.method = params$spatial.method,
                                        features = rownames(seurat), 
                                        r.metric = params$r.metric, 
                                        slot = "data")

top.clusters <- head(SpatiallyVariableFeatures(seurat), params$top.features)

sp <- SpatialPlot(object = seurat, features = top.clusters, ncol = 2)
```

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Spatial plot with predicted Cell Atlas labels of those that are spatially variable.

wrap_plots(sp)
```

## Plot labels of interest

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Spatial plot with predicted Cell Atlas labels - labels of interest.

SpatialFeaturePlot(seurat, features = params$feature.example, 
                   pt.size.factor = 1,  crop = FALSE, alpha = c(0.1, 1))
```

# Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/11-cell-atlas.rds")
```

Print session information:

```{r}
sessionInfo()
```
