---
title: "Marker gene detection"
params:
  seurat:
    - "06-merge-samples.rds"
  regress:
    - FALSE
  min.pct:
    - 0.5
  logfc.threshold:
    - 0.25
  only.pos:
    - TRUE
  pval.adj.thres:
    - 0.1
  plot_width:
    - 5
  plot_height:
    - 7
---

# Setup

Parameter description

```{r}
#| code-fold: true

par <- list(

list(
Parameter = "regress",
Value = params$regress,
Description = "Name of variables for regression. Set to FALSE if none required."
),
list(
Parameter = "min.pct",
Value = params$min.pct,
Description = "Only test genes that are detected in a minimum fraction of min.pct cells in either of the two populations - Default is 0.1"
),
list(
Parameter = "logfc.threshold",
Value = params$logfc.threshold,
Description = "Limit testing to genes which show, on average, at least X-fold difference (log-scale) between the two groups of cells. Default is 0.25."
),
list(
Parameter = "only.pos",
Value = params$only.pos,
Description = "Only return positive markers (FALSE by default)."
),
list(
Parameter = "pval.adj.thres",
Value = params$pval.adj.thres,
Description = "Adjusted p-value threshold for returning markers."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
library(clustree)
library(RColorBrewer)
library(pheatmap)
library(DT)
```

Source user-defined functions:

```{r}
source("scripts/parseCloupe.R")
source("scripts/plotpHeatmap.R")
source("scripts/reduceDims.R")
source("scripts/findMarkers.R")
```

Read experiment data:

```{r}
seurat <- readRDS(paste0("output/", params$seurat))
```

Setup colour palette:

```{r}
col <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100)
```

# Processing

## PrepSCTFindmarkers

Prepare "data" slot of SCT assay for differential expression and downstream visualisation 
Please see vignette for further details: 
https://satijalab.org/seurat/articles/sctransform_v2_vignette.html

Parse seurat object into list if not already

```{r}
#| message: false
#| warning: false

# If running on single seurat object or output from merged or integrated qmd
if (class(seurat) == "Seurat") { 

  seuratList <- list(seurat)

  # If merged or combined will have multiple samples in meta data so save into list as combined seurat
  if (length(unique(seurat@meta.data$Sample)) > 1) {
      
    names(seuratList) <- "Combined.Seurat"

    # Run PrepSCTFindMarkers
    seuratprep <- lapply(seuratList, PrepSCTFindMarkers)

  }

  # If single sample save into list as sample name
  if (length(unique(seurat@meta.data$Sample)) == 1) {

    names(seuratList) <- unique(seurat@meta.data$Sample)

    # If only a single un merged/combined experiment - do not need to run PrepSCTFindMarkers
    seuratprep <- seuratList

  }

} else {

    # If only list of un merged/combined experiments - do not need to run PrepSCTFindMarkers
    seuratprep <- seuratList
}
```

## ScaleData

Scale and center data and add ScaleData to seuratprep for heatmap visualisation

```{r}
#| message: false
#| warning: false

seuratprep <- lapply(seuratprep, scaleData, params = params)
```

## Markers Cluster

Find candidate marker genes between clusters:

```{r}
#| message: false
#| warning: false

res <- lapply(seuratprep, findAllMarkers, params = params)
```

### Write csv to file

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(res, function(x) {write.csv(x, file = paste0("output/", unique(x$Sample), 
                                                    "-FindMarkersClusters.csv"))})
```

### Interactive results

```{r}
resbind <- bind_rows(res)

DT::datatable(resbind, class = 'cell-border stripe', extensions = 'Buttons', 
              options = list(dom = 'Bfrtip', 
                             buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), 
              filter = "top")
```

### Define genes interest

Get topgenes from each cluster per seurat object and results table

```{r}
topgenes <- lapply(seuratprep, topFeatClustList, res = res, head_num = 5)
```

Plot heatmap of top markers

### DoHeatmap

```{r}
doheatmaps <- lapply(seuratprep, plotHeatmap, featureList = topgenes, 
                     type = "DoHeatmap", legend = FALSE)
```

```{r}
#| fig.width: params$plot_width
#| fig.height: params$plot_height
#| fig-cap: Heatmap of top genes per cluster.

wrap_plots(doheatmaps)
```

With legend

```{r}
doheatmapslegend <- lapply(seuratprep, plotHeatmap, featureList = topgenes, 
                           type = "DoHeatmap", legend = TRUE)
```

```{r}
#| fig.width: params$plot_width
#| fig.height: params$plot_height
#| fig-cap: Heatmap of top genes per cluster with legend.

wrap_plots(doheatmapslegend)
```

### pheatmap

```{r}
#| message: false
#| warning: false
#| fig.show: hide

pheatmaps <- lapply(seuratprep, plotHeatmap, featureList = topgenes, 
                    type = "pheatmap", head_num = 5)
```

```{r}
#| fig.width: (params$plot_width + 5)
#| fig.height: params$plot_height
#| fig-cap: pHeatmap of top genes per cluster with legend.

wrap_plots(pheatmaps)
```

# Output

Save experiment object:

```{r}
saveRDS(seuratprep, file = "output/08-marker-detection.rds")
```

```{r}
saveRDS(res, file = "output/08-marker-detection-res.rds")
```

Print session information:

```{r}
sessionInfo()
```
