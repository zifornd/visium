---
title: "FEA annotation"
params:
  res:
    - "08-marker-detection-res.rds"
  species:
    - "Mus musculus" # Mus musculus or Homo sapiens
  feature:
    - "gene"
  split.res:
    - TRUE
  group:
    - "cluster"
  custom.anno:
    - FALSE
  lfc.col.name:
    - "avg_log2FC"
  padj.col.name:
    - "p_val_adj"
  pval.adj.thres.filter:
    - 0.05
  lfc.thres.filter:
    - 0.5
  pval.adj.thres.overrep:
    - 0.05
  pval.adj.thres.gsea:
    - 0.05
  plot_width:
    - 10
  plot_height:
    - 10
---

# Setup

### Parameters

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "species",
Value = params$species,
Description = "Species used for the Spatial experiment."
),
list(
Parameter = "feature",
Value = params$feature,
Description = "Name of feature of interest used as input for downstream functional enrichment."
),
list(
Parameter = "split.res",
Value = params$split.res,
Description = "Boolean whether results table should be split further prior to running functional enrichment analysis."
),
list(
Parameter = "group",
Value = params$group,
Description = "Name of group of interest that is used to split results table further prior to running functional enrichment analysis."
),
list(
Parameter = "custom.anno",
Value = params$custom.anno,
Description = "Whether a custom annotation is used."
),
list(
Parameter = "lfc.col.name",
Value = params$lfc.col.name,
Description = "Name of the column which details log2 fold change differences for features of interest between groups of interest."
),
list(
Parameter = "padj.col.name",
Value = params$padj.col.name,
Description = "Name of the column which details adjusted p value associated with log2 fold change."
),
list(
Parameter = "pval.adj.thres.filter",
Value = params$pval.adj.thres.filter,
Description = "Adjusted p value filter threshold used to filter results table prior to overrepresentation analysis."
),
list(
Parameter = "lfc.thres.filter",
Value = params$lfc.thres.filter,
Description = "Log2 fold change threshold used to filter results table prior to overrepresentation analysis."
),
list(
Parameter = "pval.adj.thres.overrep",
Value = params$pval.adj.thres.overrep,
Description = "Adjusted p value filter threshold used to filter results table after overrepresentation analysis is completed."
),
list(
Parameter = "pval.adj.thres.gsea",
Value = params$pval.adj.thres.gsea,
Description = "Adjusted p value filter threshold used to filter results table after GSEA analysis is completed."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

::: callout-note
The paramater `split.res` is important as it will split the results table further prior to running fea. This may be useful if you have run marker detection on clusters and have a results table which contains the results for many different clusters. In this case if `split.res` is set to `TRUE`, the table will be split into separate clusters based on the `param$group` name and the workflow will be run separately on each independent cluster.
:::

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockNamedep"> Show/Hide Dependencies</button>  

<div id="BlockNamedep" class="collapse">  

### Dependencies

```{r, setup, include=TRUE}
# knitr::opts_knit$set(root.dir = "C:/Users/Ben/Documents/GitHub/visium/")
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
library(AnnotationDbi)
library(clusterProfiler)
library(enrichplot)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(msigdbr)
library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
library(clustree)
library(RColorBrewer)
library(pheatmap)
library(DT)
```

Source user-defined functions:

```{r}
source("scripts/annotate.R")
source("scripts/functionalEnrichment.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

</div>

# Processing

### Reading in experiment object

We can read in the seurat object that we loaded in from the previous worksheet (See quarto worksheet `09-marker-detection.qmd` for more details).

In theory this module could be used to process other results tables with genes and some form of enrichment (lfc) - however it has not yet been tested.

```{r}
res <- readRDS(paste0("output/", params$res))
```

### Reading in gene sets

Below we read in MSigDb gene sets using the R package `msigdbr`. As we understand individuals may require their own custom gene set we allow users to specify a separate table of genes in the same format as output by `msigdbr`.

The standard gene sets we use are C8 which are a group of gene sets which look at cell types, and the hallmarks set which are a highly curated streamlined set which are useful to describe a biological state.

Please see https://www.gsea-msigdb.org/gsea/msigdb/ for details on the gene sets used.

Below we obtain the gene sets for a given species (10x visium supports `Mus musculus` or `Homo sapiens`).

```{r}
cells_genesets <- msigdbr(species = params$species, category = "C8")
hallmarks_genesets <- msigdbr(species = params$species, category = "H")
```

Below we transform to a dataframe:

```{r}
cells_genesets_t2g <- cells_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
hallmarks_genesets_t2g <- hallmarks_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
```

Next we process the custom gene sets if provided:

```{r}
custom_genesets_t2g <- NULL

if (params$custom.anno != FALSE) {

  custom_genesets <- read.table(params$custom.anno, header = TRUE, sep = ",", quote = F)
  custom_genesets_t2g <- custom_genesets %>% dplyr::distinct(gs_name, entrez_gene) %>% as.data.frame()
}
```

## Prepare results table

Before we run a given functional enrichment approach we need to process the results table. In the case of simple over-representation analysis we need to select for genes of interest based on some thresholds of choice, and in the case of pre-rank GSEA we need to rank the genes by some measurement of enrichment. Generally speaking we will rank the genes by lfc.

::: callout-note
You can change many of the paramaters below for this filtering step. Please see the paramater desciption above @tbl-params for more details.
:::

```{r}
#| message: false
#| warning: false
#| results: hide

vector_res_overrep <- lapply(res, parse_res, group = params$group, 
                             p_adj = params$pval.adj.thres.filter, 
                             lfc = params$lfc.thres.filter, 
                             type = "overrep", 
                             lfc_name = params$lfc.col.name, 
                             padj_name = params$padj.col.name, 
                             gene_id_name = params$feature, 
                             split.res = params$split.res)

```

We prepare a separate set of genes for GSEA as a named vector ranked by lfc.

```{r}
#| message: false
#| warning: false
#| results: hide

vector_res_gsea <- lapply(res, parse_res, group = params$group, 
                          type = "gsea", lfc_name = params$lfc.col.name, 
                          padj_name = params$padj.col.name, 
                          gene_id_name = params$feature, 
                          split.res = params$split.res)

```

## Run FEA

### Enricher

After getting the results tables ready we can run the subsequent enrichment analyses. First we run the overrepresentation analysis with the function `enrichr` using the `clusterprofiler` package. There are many other approaches available and we may switch over to another if needs be.

Below we define the name of the org db (`org.Mm.eg.db` or `org.Hs.eg.db`) based on the name of the organism given to the `msigdbr`.

```{r}
if (params$species == "Mus musculus") {
  
  org_species <- "Mm"
  
}
if (params$species == "Homo sapiens") {
  
  org_species <- "Hs"
  
}
```

Below we perform the hypergeometric sample wise and per `r params$group` if the table is split with `split.res`.

For C8:

```{r}
obj_overrep_cells <- lapply(vector_res_overrep, wrap_cp_custom, 
                            term2gene = cells_genesets_t2g, 
                            species = org_species,
                            analysis_type = "overrep", 
                            pval = params$pval.adj.thres.overrep, 
                            padj = params$pval.adj.thres.overrep, 
                            pmethod = "BH")
```

For Hallmark:

```{r}
obj_overrep_hallmarks <- lapply(vector_res_overrep, wrap_cp_custom, 
                                term2gene = hallmarks_genesets_t2g,
                                species = org_species, 
                                analysis_type = "overrep", 
                                pval = params$pval.adj.thres.overrep, 
                                padj = params$pval.adj.thres.overrep, 
                                pmethod = "BH")
```

For Custom:

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  obj_overrep_hallmarks <- lapply(vector_res_overrep, wrap_cp_custom, 
                                  term2gene = custom_genesets_t2g, 
                                  species = org_species,
                                  analysis_type = "overrep",
                                  pval = params$pval.adj.thres.overrep, 
                                  padj = params$pval.adj.thres.overrep, 
                                  pmethod = "BH")
}
```

Finally we parse the output of `enrichr` so we can use it for downstream plotting and saving:

For C8:

```{r}
res_overrep_cells <- lapply(obj_overrep_cells, wrap_parse_cp_obj,  
                            species = org_species,
                            type = "overrep", 
                            db = "Custom")
```

For Hallmark:

```{r}
res_overrep_hallmarks <- lapply(obj_overrep_hallmarks, wrap_parse_cp_obj, 
                                species = org_species, 
                                type = "overrep", 
                                db = "Custom")
```

For Custom:

```{r}
if (!is.null(custom_genesets_t2g)) {

  res_overrep_hallmarks <- lapply(obj_overrep_hallmarks, wrap_parse_cp_obj, 
                                  species = org_species, 
                                  type = "overrep", 
                                  db = "Custom")

}
```

#### Interactive results

We also present these results interactively using the DT package. The extra JS code just deals with the extra long ontology terms that make a normal interactive datatable hard to visualise.

Results for C8:

```{r}
#| code-fold: true

# Only take final level of results table from list
res_overrep_cells <- unlist(res_overrep_cells, recursive = FALSE)

# remove empty elements for clusters without any significant results
resbind_overrep_cells <- res_overrep_cells[sapply(res_overrep_cells, nrow) > 0]

# bind into single results table
resbind_overrep_cells <- bind_rows(resbind_overrep_cells, .id = params$group)

# Plot as interactive table
DT::datatable(resbind_overrep_cells, class = 'cell-border stripe', 
              extensions = 'Buttons', rownames = FALSE, 
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(8,10),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

Results for Hallmark:

```{r}
#| code-fold: true

# Only take final level of results table from list
res_overrep_hallmarks <- unlist(res_overrep_hallmarks, recursive = FALSE)

# remove empty elements for clusters without any significant results
resbind_overrep_hallmarks <- res_overrep_hallmarks[sapply(res_overrep_hallmarks, nrow) > 0]

# bind into single results table
resbind_overrep_hallmarks <- bind_rows(resbind_overrep_hallmarks, .id = params$group)

# Plot as interactive table
DT::datatable(resbind_overrep_hallmarks, class = 'cell-border stripe', 
              extensions = 'Buttons', rownames = FALSE, 
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(8,10),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

Results for Custom:

```{r}
#| code-fold: true

if (!is.null(custom_genesets_t2g)) {

  # Only take final level of results table from list
  res_overrep_custom <- unlist(res_overrep_custom, recursive = FALSE)

  # remove empty elements for clusters without any significant results
  resbind_overrep_custom <- res_overrep_custom[sapply(res_overrep_custom, nrow) > 0]

  # bind into single results table
  resbind_overrep_custom <- bind_rows(resbind_overrep_custom, .id = params$group)

  # Plot as interactive table
  DT::datatable(resbind_overrep_custom, class = 'cell-border stripe', 
                extensions = 'Buttons', rownames = FALSE, 
                options = list(
                  dom = 'Bfrtip',
                  buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                  pageLength = 5,
                  columnDefs = list(
                    list(targets = c(8,10),
                         render = JS(
                           "function(data, type, row, meta) {",
                           "return type === 'display' && data.length > 6 ?",
                           "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                           "}")))),
                filter = "top")
}
```

#### Save out as CSV

Next we save these same results out as CSV files.

Save out results for C8:

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_overrep_cells), function(x, res_overrep_cells) {
  
  write.csv(res_overrep_cells[[x]], 
            file = paste0("output/", x, "-Cells-Overrep_Clusters.csv"))
  
  }, res_overrep_cells = res_overrep_cells)
```

Save out results for Hallmark:

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_overrep_hallmarks), function(x, res_overrep_hallmarks) {
  
  write.csv(res_overrep_hallmarks[[x]], 
            file = paste0("output/", x, "-Hallmarks-Overrep_Clusters.csv"))
  
  }, res_overrep_hallmarks = res_overrep_hallmarks)
```

Save out results for Custom:

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

  lapply(names(res_overrep_custom), function(x, res_overrep_custom) {
    
    write.csv(res_overrep_custom[[x]], 
              file = paste0("output/", x, "-Custom-Overrep_Clusters.csv"))
    
    }, res_overrep_custom = res_overrep_custom)
}
```

### GSEA

After completing overrepresentation analysis we then move to completing GSEA. We do this by using the function `GSEA` in the `clusterprofiler` package. There are other approaches available and we may switch over to another if needs be - however this GSEA function does come with some convenient plotting functions which allow us to plot some standard GSEA enrichment plots used commonly in publications.

Below we perform GSEA sample wise and per `r params$group` if the table is split with `split.res`.

For C8:

```{r}
obj_gsea_cells <- lapply(vector_res_gsea, wrap_cp_custom, 
                         term2gene = cells_genesets_t2g,
                         species = org_species,
                         analysis_type = "gsea",
                         pval = params$pval.adj.thres.gsea, 
                         padj = params$pval.adj.thres.gsea, 
                         pmethod = "BH")
```

For Hallmark:

```{r}
obj_gsea_hallmarks <- lapply(vector_res_gsea, wrap_cp_custom, 
                             term2gene = hallmarks_genesets_t2g,
                             species = org_species,
                             analysis_type = "gsea", 
                             pval = params$pval.adj.thres.gsea, 
                             padj = params$pval.adj.thres.gsea, 
                             pmethod = "BH")
```

For Custom:

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  obj_gsea_custom <- lapply(vector_res_gsea, wrap_cp_custom, 
                            term2gene = custom_genesets_t2g,
                            species = org_species, 
                            analysis_type = "gsea", 
                            pval = params$pval.adj.thres.gsea, 
                            padj = params$pval.adj.thres.gsea, 
                            pmethod = "BH")
  }
```

Finally we parse the output of `GSEA` so we can use it for downstream plotting and saving:

For C8:

```{r}
res_gsea_cells <- lapply(obj_gsea_cells, wrap_parse_cp_obj,  
                         species = org_species,
                         type = "gsea",
                         db = "Custom")
```

For Hallmark:

```{r}
res_gsea_hallmarks <- lapply(obj_gsea_hallmarks, wrap_parse_cp_obj,
                             species = org_species,
                             type = "gsea",
                             db = "Custom")
```

For Custom:

```{r}
if (!is.null(custom_genesets_t2g)) {
  
  res_gsea_custom <- lapply(obj_gsea_custom, wrap_parse_cp_obj,
                               species = org_species,
                               type = "gsea",
                               db = "Custom")
  }
```

#### Interactive results

We also present these results interactively using the DT package. The extra JS code just deals with the extra long ontology terms that make a normal interactive datatable hard to visualise.

Results for C8:

```{r}
#| code-fold: true

# Only take final level of results table from list
res_gsea_cells <- unlist(res_gsea_cells, recursive = FALSE)

# remove empty elements for clusters without any significant results
resbind_gsea_cells <- res_gsea_cells[sapply(res_gsea_cells, nrow) > 0]

# bind into single results table
resbind_gsea_cells <- bind_rows(resbind_gsea_cells, .id = params$group)

DT::datatable(resbind_gsea_cells, class = 'cell-border stripe',
              extensions = 'Buttons', rownames = FALSE,
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(11,12),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

Results for Hallmark:

```{r}
#| code-fold: true

# Only take final level of results table from list
res_gsea_hallmarks <- unlist(res_gsea_hallmarks, recursive = FALSE)

# remove empty elements for clusters without any significant results
resbind_gsea_hallmarks <- res_gsea_hallmarks[sapply(res_gsea_hallmarks, nrow) > 0]

# bind into single results table
resbind_gsea_hallmarks <- bind_rows(resbind_gsea_hallmarks, .id = params$group)

DT::datatable(resbind_gsea_hallmarks, class = 'cell-border stripe',
              extensions = 'Buttons', rownames = FALSE,
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                pageLength = 5,
                columnDefs = list(
                  list(targets = c(11,12),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "return type === 'display' && data.length > 6 ?",
                         "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                         "}")))),
              filter = "top")
```

Results for Custom:

```{r}
#| code-fold: true

if (!is.null(custom_genesets_t2g)) {

  # Only take final level of results table from list
  res_gsea_custom <- unlist(res_gsea_custom, recursive = FALSE)

  # remove empty elements for clusters without any significant results
  resbind_gsea_custom <- res_gsea_custom[sapply(res_gsea_custom, nrow) > 0]

  # bind into single results table
  resbind_gsea_custom <- bind_rows(resbind_gsea_custom, .id = params$group)

  DT::datatable(resbind_gsea_custom, class = 'cell-border stripe',
                extensions = 'Buttons', rownames = FALSE,
                options = list(
                  dom = 'Bfrtip',
                  buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                  pageLength = 5,
                  columnDefs = list(
                    list(targets = c(11,12),
                         render = JS(
                           "function(data, type, row, meta) {",
                           "return type === 'display' && data.length > 6 ?",
                           "'<span title=\"' + data + '\">' + data.substr(0, 6) + '...</span>' : data;",
                           "}")))),
                filter = "top")
  }
```

#### Save out as CSV

Next we save these same results out as CSV files.

Save out results for C8:

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_gsea_cells), function(x, res_gsea_cells) {
  
  write.csv(res_gsea_cells[[x]], 
            file = paste0("output/", x, "-Cells-GSEA_Clusters.csv"))
  
  }, res_gsea_cells = res_gsea_cells)
```

Save out results for Hallmark:

```{r}
#| message: false
#| warning: false
#| results: hide

lapply(names(res_gsea_hallmarks), function(x, res_gsea_hallmarks) {
  
  write.csv(res_gsea_hallmarks[[x]], 
            file = paste0("output/", x, "-Hallmarks-GSEA_Clusters.csv"))
  
  }, res_gsea_hallmarks = res_gsea_hallmarks)
```

Save out results for Custom:

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {
  
  lapply(names(res_gsea_custom), function(x, res_gsea_custom) {
    
    write.csv(res_gsea_custom[[x]], 
              file = paste0("output/", x, "-Custom-GSEA_Clusters.csv"))
    
    }, res_gsea_custom = res_gsea_custom)
}
```

### Plot output

Next we will plot some of the output of the enrichment analyses. We will only plot simple barplots and GSEA enrichment plots to keep things as readable as possible.

#### Barplots

For Overrep C8:

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_overrep_cells), function(x, res_overrep_cells){ 

  plot_barplot(res_overrep_cells[[x]], 
               colnames_select = c("Description", "p.adjust", "GeneRatio"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_overrep_cells = res_overrep_cells)
```

@fig-barplot-over-c8

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot Overrepresentation analysis Msigdb C8
#| label: fig-barplot-over-c8

wrap_plots(barplots, ncol = 2)
```

For Overrep Hallmark:

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_overrep_hallmarks), function(x, res_overrep_hallmarks){ 
  
  plot_barplot(res_overrep_hallmarks[[x]], 
               colnames_select = c("Description", "p.adjust", "GeneRatio"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_overrep_hallmarks = res_overrep_hallmarks)
```

@fig-barplot-over-h

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot Ovverepresentation analysis Msigdb Hallmarks
#| label: fig-barplot-over-h

wrap_plots(barplots, ncol = 2)
```

For Overrep Custom:

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {
  
  barplots <- lapply(names(res_overrep_custom), function(x, res_overrep_custom){ 
    
    plot_barplot(res_overrep_custom[[x]], 
                 colnames_select = c("Description", "p.adjust", "GeneRatio"), 
                 colour = "steelblue", 
                 title = x, 
                 x = "-log10(Adjusted P.value)", 
                 y = "Term",
                 top = 5)
    
    }, res_overrep_custom = res_overrep_custom)
  
}
```

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot Overrepresentation analysis Custom geneset
#| label: fig-barplot-over-custom

if (!is.null(custom_genesets_t2g)) {
  
  wrap_plots(barplots, ncol = 2)
  
}
```

For GSEA C8

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_gsea_cells), function(x, res_gsea_cells){
  
  plot_barplot(res_gsea_cells[[x]], 
               colnames_select = c("Description", "p.adjust", "NES"), 
               colour = "steelblue", 
               title = x, 
               x = "-log10(Adjusted P.value)", 
               y = "Term", 
               top = 5)
  
  }, res_gsea_cells = res_gsea_cells)
```

@fig-barplot-gsea-c8

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot GSEA Msigdb C8
#| label: fig-barplot-gsea-c8

wrap_plots(barplots, ncol = 2)
```

For GSEA Hallmark

```{r}
#| message: false
#| warning: false
#| results: hide

barplots <- lapply(names(res_gsea_hallmarks), function(x, res_gsea_hallmarks){

    plot_barplot(res_gsea_hallmarks[[x]],
                 colnames_select = c("Description", "p.adjust", "NES"),
                 colour = "steelblue",
                 title = x,
                 x = "-log10(Adjusted P.value)",
                 y = "Term",
                 top = 5)
  
  }, res_gsea_hallmarks = res_gsea_hallmarks)  


```

@fig-barplot-gsea-h

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot GSEA Msigdb Hallmarks
#| label: fig-barplot-gsea-h

wrap_plots(barplots, ncol = 2)
```

For GSEA Custom

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

  barplots <- lapply(names(res_gsea_custom), function(x, res_gsea_custom){ 
    
    plot_barplot(res_gsea_custom[[x]], 
                 colnames_select = c("Description", "p.adjust", "NES"), 
                 colour = "steelblue", 
                 title = x, 
                 x = "-log10(Adjusted P.value)", 
                 y = "Term", 
                 top = 5)
    
    }, res_gsea_custom = res_gsea_custom)
}
```

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Barplot GSEA Custom geneset
#| label: fig-barplot-gsea-custom

if (!is.null(custom_genesets_t2g)) {

  wrap_plots(barplots, ncol = 2)
  
}
```

#### GSEA enrichment

Finally we will plot the top enrichment plot per results table or group if the table has been split with `split.res`.

For GSEA C8

```{r}
#| message: false
#| warning: false
#| results: hide

enrichplots <- lapply(names(unlist(obj_gsea_cells, recursive = F)), function(x, obj_gsea_cells){
  
  plot_fea_results(obj_gsea_cells[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_cells = unlist(obj_gsea_cells, recursive = F))
```

@fig-enrich-gsea-c8

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Msigdb C8
#| label: fig-enrich-gsea-c8

wrap_plots(enrichplots)
```

For GSEA Hallmark

```{r}
#| message: false
#| warning: false
#| results: hide

enrichplots <- lapply(names(unlist(obj_gsea_hallmarks, recursive = F)), function(x, obj_gsea_hallmarks) {
  
  plot_fea_results(obj_gsea_hallmarks[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_hallmarks = unlist(obj_gsea_hallmarks, recursive = F))
```

@fig-enrich-gsea-h

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Msigdb Hallmarks
#| label: fig-enrich-gsea-h

wrap_plots(enrichplots)
```

For GSEA Custom

```{r}
#| message: false
#| warning: false
#| results: hide

if (!is.null(custom_genesets_t2g)) {

enrichplots <- lapply(names(unlist(obj_gsea_custom, recursive = F)), function(x, obj_gsea_custom) {
  
  plot_fea_results(obj_gsea_custom[[x]], 
                   title = x, 
                   plot_type = "gsea_enrichment", 
                   row_gsea = 1)
  
  }, obj_gsea_custom = unlist(obj_gsea_custom, recursive = F))
}
```

```{r}
#| fig.width: !expr (params$plot_width + 5)
#| fig.height: !expr (params$plot_height + 5)
#| fig-cap: Enrichment plots GSEA Custom geneset
#| label: fig-enrich-gsea-custom

if (!is.null(custom_genesets_t2g)) {

  wrap_plots(enrichplots)
  
}
```

# Output

As we do not attach these results to the seurat object we save these results into a separate list and save them out as an additional rds.

Save experiment object:

```{r}
if (!is.null(custom_genesets_t2g)) {

  res_anno <- list(res_overrep_cells = res_overrep_cells, 
                   res_overrep_hallmarks = res_overrep_hallmarks, 
                   res_overrep_custom = res_overrep_custom, 
                   res_gsea_cells = res_gsea_cells, 
                   res_gsea_hallmarks = res_gsea_hallmarks, 
                   res_gsea_custom = res_gsea_custom)

} else {

  res_anno <- list(res_overrep_cells = res_overrep_cells, 
                   res_overrep_hallmarks = res_overrep_hallmarks, 
                   res_gsea_cells = res_gsea_cells, 
                   res_gsea_hallmarks = res_gsea_hallmarks)
}
```

```{r}
saveRDS(res_anno, file = "output/09-fea-annotation.rds")
```

### Output Description

@tbl-outputs

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
Parameter = "res_anno",
Value = "[res_anno](../../output/09-fea-annotation.rds)",
Description = "FEA Results table of combined over-representation and GSEA results for a supplied results table."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

### Session information

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>
