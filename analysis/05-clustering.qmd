---
title: "Clustering"
params:
  cluster: "res.0.3"
  cluster.plot: ["res.0.2", "res.0.3"]
  plot_width:
    - 8
  plot_height:
    - 4.5
---

# Setup

### Parameters

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "cluster",
Value = params$cluster,
Description = "Chosen res params for clustering."
),
list(
Parameter = "cluster.plot",
Value = params$cluster.plot,
Description = "Chosen res params to complete spatial plot downstream."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

### Dependencies

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(clustree)
library(pheatmap)
library(RColorBrewer)
```

Source user-defined functions:

```{r}
#| message: false
#| warning: false

source("scripts/reduceDims.R")
source("scripts/cluster.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

# Processing

### Reading in experiment object

We can read in the seurat object that we loaded in from the previous worksheet (See quarto worksheet `04-reduced-dimensions.qmd` for more details).

```{r}
seurat <- readRDS("output/04-reduced-dimensions.rds")
```

## Clustering

A common next step in the spatial workflow is to cluster spots to identify anatomically distinct regions across tissue samples. Seurat uses a graph-based clustering approach (SNN), building upon strategies from [Macosko *et al*](http://www.cell.com/abstract/S0092-8674(15)00549-8)*.* In brief, this approach completes clustering in two stages - the first stage embeds cells in a graph structure (e.g. K-nearest neighbor (KNN) graph) with edges drawn between cells with similar expression patterns, and the second stage attempts to partition the graph into highly connected communities.

Please see Seurat single cell vignette (https://satijalab.org/seurat/articles/pbmc3k_tutorial.html) for more details.

Like dimensionality reduction clustering using this approach uses a `resolution` parameter that sets the 'granularity' of the downstream clustering. The Seurat authors recommend a value between `0.4-1.2` but the value should be explored to see how it affects stability and quality of clusters. Another important parameter is the `k.param` which defines the k number of nearest neighbors for a given data set during KNN graph construction.

Below we complete SNN clustering whilst changing the `resolution` parameter as well as the `k.param` parameter. Generally speaking the default `k.param of 20` should be kept - but as a rule of thumb you do not want to have a higher k than the number of cells in your least populated cell type. Other rules of thumb for KNN approaches are `sqrt(N)` where N is the number of cells/spots.

```{r}
#| message: false
#| warning: false

seurat_1 <- bplapply(seurat, snnCluster, k.param = 5, 
                     resolution = 0.1, BPPARAM = BPPARAM)

seurat_2 <- bplapply(seurat, snnCluster, k.param = 10, 
                     resolution = 0.3, BPPARAM = BPPARAM)

seurat_3 <- bplapply(seurat, snnCluster, k.param = 15, 
                     resolution = 0.5, BPPARAM = BPPARAM)

seurat_4 <- bplapply(seurat, snnCluster, k.param = 20, 
                     resolution = 0.6, BPPARAM = BPPARAM)

seurat_5 <- bplapply(seurat, snnCluster, k.param = 50, 
                     resolution = 0.8, BPPARAM = BPPARAM)
```

### Plot umaps

An good way of initially assessing the quality of clustering is to visually inspect the UMAP which we created in the previous work sheet (please see `04-reduced-dimensions.qmd`). As this UMAP is stored within the seurat object we do not need to run it again - but can instead plot it straight away.

Here we plot using the '`seurat_clusters`' column name which seurat uses to save the latest clustering results in the object metadata.

@fig-kparam-05-res-01 Plot UMAP k.param = 5, resolution = 0.1

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 5, resolution = 0.1
#| label: fig-kparam-05-res-01

wrap_plots(lapply(seurat_1, dimplot, reduction = "umap", 
                  label = T, group.by = "seurat_clusters"), ncol = 2)
```

@fig-kparam-10-res-03 Plot UMAP k.param = 10, resolution = 0.3

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 10, resolution = 0.3
#| label: fig-kparam-10-res-03

wrap_plots(lapply(seurat_2, dimplot, reduction = "umap", 
                  label = T, group.by = "seurat_clusters"), ncol = 2)
```

@fig-kparam-15-res-05 Plot UMAP k.param = 15, resolution = 0.5

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 15, resolution = 0.5
#| label: fig-kparam-15-res-05

wrap_plots(lapply(seurat_3, dimplot, reduction = "umap", 
                  label = T, group.by = "seurat_clusters"), ncol = 2)
```

@fig-kparam-20-res-061 Plot UMAP k.param = 20, resolution = 0.6

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.6
#| label: fig-kparam-20-res-061

wrap_plots(lapply(seurat_4, dimplot, reduction = "umap", 
                  label = T, group.by = "seurat_clusters"), ncol = 2)
```

@fig-kparam-50-res-08 Plot UMAP k.param = 50, resolution = 0.8

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 50, resolution = 0.8
#| label: fig-kparam-50-res-08

wrap_plots(lapply(seurat_5, dimplot, reduction = "umap", 
                  label = T, group.by = "seurat_clusters"), ncol = 2)
```

Clean up workspace

```{r}
rm(seurat_1, seurat_2, seurat_3, seurat_4, seurat_5)
gc()
```

### Keeping k stable

As discussed above generally speaking we like to keep k.param as Seurat default (`k.param = 20`), therefore below we will keep it stable whilst changing the `resolution` parameter. We will save the results of this clustering into the seurat object so we can refer to this clustering downstream.

```{r}
#| message: false
#| warning: false

seurat <- bplapply(seurat, snnCluster, k.param = 20,
                   resolution = 0.1, BPPARAM = BPPARAM)

seurat <- bplapply(seurat, snnCluster, k.param = 20, 
                   resolution = 0.2, BPPARAM = BPPARAM)

seurat <- bplapply(seurat, snnCluster, k.param = 20, 
                   resolution = 0.3, BPPARAM = BPPARAM)

seurat <- bplapply(seurat, snnCluster, k.param = 20, 
                   resolution = 0.5, BPPARAM = BPPARAM)

seurat <- bplapply(seurat, snnCluster, k.param = 20, 
                   resolution = 0.6, BPPARAM = BPPARAM)

seurat <- bplapply(seurat, snnCluster, k.param = 20, 
                   resolution = 0.8, BPPARAM = BPPARAM)
```

### Plot UMAPS with `k.params 20`

Here we plot using the meta data column name associated with a given resolution.

@fig-kparam-20-res-01 Plot UMAP k.param = 20, resolution = 0.1

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.1
#| label: fig-kparam-20-res-01

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.1"), ncol = 2)
```

@fig-kparam-20-res-02 Plot UMAP k.param = 20, resolution = 0.2

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.2
#| label: fig-kparam-20-res-02

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.2"), ncol = 2)
```

@fig-kparam-20-res-03 Plot UMAP k.param = 20, resolution = 0.3

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.3
#| label: fig-kparam-20-res-03

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.3"), ncol = 2)
```

@fig-kparam-20-res-05 Plot UMAP k.param = 20, resolution = 0.5

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.5
#| label: fig-kparam-20-res-05

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.5"), ncol = 2)
```

@fig-kparam-20-res-06 Plot UMAP k.param = 20, resolution = 0.6

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.6
#| label: fig-kparam-20-res-06

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.6"), ncol = 2)
```

@fig-kparam-20-res-08 Plot UMAP k.param = 20, resolution = 0.8

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: k.param = 20, resolution = 0.8
#| label: fig-kparam-20-res-08

wrap_plots(lapply(seurat, dimplot, reduction = "umap", 
                  label = T, group.by = "res.0.8"), ncol = 2)
```

## Clustering stability

Another way of deciding what resolution to choose is to look at the stability of clusters across different resolution parameters - in particular watching how spots move between clusters as the number of clusters increases. Below we use the package `clustree` to produce clustering trees to visualise this process.

A good resolution is one which captures a number of stable clusters that remain in tact as the resolution parameter increases. Unstable clusters demonstrate large movements of samples(spots) between them as we change resolution parameters.

We complete this process with `k.param = 20` (seurat default)

```{r}
#| message: false
#| warning: false

clustree_plots <- lapply(seurat, clustreeRun)
```

@fig-clustree Plot clustree

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr (params$plot_height + 4)
#| fig-cap: Clustree plot
#| label: fig-clustree

wrap_plots(clustree_plots, ncol = 2)
```

## Silhouette

There are numerous other quantitative ways to evaluate clustering quality - however the one we use here is the silhouette width metric. The idea is that a spot with a high and positive silhouette score is closer to other spots from the same cluster than spots from other clusters. Spots with negative scores reside within a cluster that is poorly separated from others. Please see the `bluster` bioconducter package for more details:

-   https://www.bioconductor.org/packages/release/bioc/vignettes/bluster/inst/doc/diagnostics.html#computing-the-silhouette-width

We complete this process with `k.param = 20` (seurat default)

```{r}
#| message: false
#| warning: false

silhouettes_1 <- lapply(seurat, silhouette, clustername = "res.0.2")

silhouettes_2 <- lapply(seurat, silhouette, clustername = "res.0.3")

silhouettes_3 <- lapply(seurat, silhouette, clustername = "res.0.5")

silhouettes_4 <- lapply(seurat, silhouette, clustername = "res.0.6")

silhouettes_5 <- lapply(seurat, silhouette, clustername = "res.0.8")
```

We then prepare to plot these scores as boxplots.

```{r}
#| message: false
#| warning: false

silhouette_plots_1 <- lapply(silhouettes_1, plotSil, type = "boxplot", 
                             title = "res.0.2")

silhouette_plots_2 <- lapply(silhouettes_2, plotSil, type = "boxplot", 
                             title = "res.0.3")

silhouette_plots_3 <- lapply(silhouettes_3, plotSil, type = "boxplot", 
                             title = "res.0.5")

silhouette_plots_4 <- lapply(silhouettes_4, plotSil, type = "boxplot", 
                             title = "res.0.6")

silhouette_plots_5 <- lapply(silhouettes_5, plotSil, type = "boxplot", 
                             title = "res.0.8")
```

Clean up workspace

```{r}
rm(silhouettes_1, silhouettes_2, silhouettes_3, silhouettes_4, silhouettes_5)
gc()
```

#### Plot silhouette scores

Below we plot these scores as boxplots:

@fig-sil-res.02 Plot silhouette scores for clusters of param res.0.2

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr params$plot_height
#| fig-cap: Silhouette plot res 0.2
#| label: fig-sil-res.02

wrap_plots(silhouette_plots_1, ncol = 2)
```

@fig-sil-res.03 Plot silhouette scores for clusters of res.0.3

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr params$plot_height
#| fig-cap: Silhouette plot res 0.3
#| label: fig-sil-res.03

wrap_plots(silhouette_plots_2, ncol = 2)
```

@fig-sil-res.05 Plot silhouette scores for clusters of res.0.5

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr params$plot_height
#| fig-cap: Silhouette plot res 0.5
#| label: fig-sil-res.05

wrap_plots(silhouette_plots_3, ncol = 2)
```

@fig-sil-res.06 Plot silhouette scores for clusters of res.0.6

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr params$plot_height
#| fig-cap: Silhouette plot res 0.6
#| label: fig-sil-res.06

wrap_plots(silhouette_plots_4, ncol = 2)
```

@fig-sil-res.08 Plot silhouette scores for clusters of res.0.8

```{r}
#| fig.width: !expr (params$plot_width + 2)
#| fig.height: !expr params$plot_height
#| fig-cap: Silhouette plot res 0.8
#| label: fig-sil-res.08

wrap_plots(silhouette_plots_5, ncol = 2)
```

## Spatial Clusters

Another important approach for clustering in the context of spatial transcriptomics is to see how this clustering looks when mapped onto our tissue images. By doing this we can see if our clusters relate to biology and whether a given parameter introduces noise (introduces a randomly distributed cluster) or finds a anatomically prescribed region of interest.

Below we will plot two resolutions of interest across our H+E images.

::: callout-note
Please take the two resolution parameters of interest and define them as params for plotting as spatial dimension plots.
:::

SpatialDimPlot group.by param not currently working with Seurat_4.1.1 for some reason. Can get around this by setting identity of object prior to plotting. See plotSpatialCluster for more details.

```{r}
spatial_dim1 <- lapply(seurat, plotSpatialCluster, 
                       group = params$cluster.plot[[1]])

spatial_dim2 <- lapply(seurat, plotSpatialCluster, 
                       group = params$cluster.plot[[2]])
```

@fig-spatial-res1 Plot spatial plot clusters for `r params$cluster.plot[[1]]`

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr (params$plot_height + 3)
#| fig-cap: !expr paste0("Spatial plot ", params$cluster.plot[[1]])
#| label: fig-spatial-res1

wrap_plots(spatial_dim1, ncol = 2)
```

@fig-spatial-res2 Plot spatial plot clusters for `r params$cluster.plot[[2]]`

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr (params$plot_height + 3)
#| fig-cap: !expr paste0("Spatial plot ", params$cluster.plot[[2]])
#| label: fig-spatial-res2

wrap_plots(spatial_dim2, ncol = 2)
```

## Apply chosen cluster labels

Below we decide on a resolution of choice using a combination of the above 4 approaches (UMAP, cluster tree, silhouette scores, and the spatial distribution of clusters) and apply this label to the seurat meta data column as "Cluster".

```{r}
seurat <- lapply(seurat, addLabel, chosenCluster = params$cluster)
```

### UMAP

Below we plot the UMAP with clustering resolution of choice `r params$cluster`.

```{r}
#| warning: false

umap_plots <- lapply(seurat, dimplot, reduction = "umap", group.by = "Cluster")
```

@fig-umap-res-choice Plot UMAP `r params$cluster`

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: !expr paste0("UMAP chosen resolution ", params$cluster)
#| label: fig-umap-res-choice

wrap_plots(umap_plots, ncol = 2)
```

### TSNE

Below we plot the TSNE with clustering resolution of choice.

```{r}
#| warning: false

tsne_plots <- lapply(seurat, dimplot, reduction = "tsne", group.by = "Cluster")
```

@fig-tsne-res-choice Plot TSNE `r params$cluster`

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: !expr paste0("TSNE chosen resolution ", params$cluster)
#| label: fig-tsne-res-choice

wrap_plots(tsne_plots, ncol = 2)
```

# Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/05-clustering.rds")
```

Print session information:

```{r}
sessionInfo()
```
