---
title: "Spatially variable feature detection"
params:
  seurat:
    - "05-clustering.rds" # "07-integrate-samples.rds"
  nfeatures:
    - 100
  spatial.method:
    - "markvariogram"
  top.features:
    - 5
  r.metric:
    - 5 # standard given by Seurat
  regress:
    - FALSE
  plot_width:
    - 5
  plot_height:
    - 7
  colours:
    - "RdBu"
---

# Setup

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "seurat",
Value = params$seurat,
Description = "Name of seurat object used for analysis."
),
list(
Parameter = "nfeatures",
Value = params$nfeatures,
Description = "Number of features used for variable spatial feature analysis."
),
list(
Parameter = "spatial.method",
Value = params$spatial.method,
Description = "Method used for variable spatial feature analysis. Choice of markvariogram (Trendseek) or moransi"
),
list(
Parameter = "top.features",
Value = params$top.features,
Description = "Number of spatially variable features to plot onto tissue images."
),
list(
Parameter = "r.metric",
Value = params$r.metric,
Description = "r value at which to report the trans value of the mark variogram. Seurat advised to leave at 5."
),
list(
Parameter = "colours",
Value = params$colours,
Description = "RdBu"
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockNamedep"> Show/Hide Dependencies</button>  

<div id="BlockNamedep" class="collapse">  

### Dependencies

Restore project dependencies:

```{r}
renv::restore()
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(RColorBrewer)
```

Source user-defined functions:

```{r}
source("scripts/loadInSpatial.R")
source("scripts/plotpHeatmap.R")
source("scripts/findMarkers.R")
source("scripts/createDT.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

</div>

# Processing

## Reading in experiment object

We can read in the `output/06-merge-samples.rds` or `output/07-integrate-samples.rds` seurat object that we saved from previous worksheets (See quarto worksheets `06-merge-samples.qmd` and `07-integrate-samples.qmd` for more details).

Alternatively you can run this step of the workflow on un-merged or un-integrated samples following clustering (`output/05-clustering.rds` and `05-clustering.qmd`). In this case you will need to tweak plot sizes (see `params$plot_width` and `params$plot_height` for more details).

::: callout-note
Please take the seurat object of choice and define them as `params$seurat` in @tbl-params.
:::

```{r}
seurat <- readRDS(paste0("output/", params$seurat))
```

## Setup colour palette

Below we set the colour palette we will use for the custom pheatmap used for plotting of cluster markers.

Other options from RColourBrewer are `RdYlBu`, `RdYlGn`, `Spectral` etc.

```{r}
col <- colorRampPalette(rev(brewer.pal(n = 11, name = params$colours)))(100)
```

## PrepSCTFindmarkers

As discussed during `06-merge-samples.qmd` and `07-integrate-samples.qmd` worksheets where SCT normalisation has been completed on individual samples and then these samples have subsequently been combined - these combined objects contain multiple SCT models. Before further downstream analysis, therefore, we need to perform additional processing on these combined objects.

As this worksheet may be completed on un-combined objects the code chunk below checks if the seurat object is combined before applying this extra processing step.

`PrepSCTFindMarkers` prepares the "data" slot of SCT assay for differential expression and downstream visualisation.

Please see vignette for further details: https://satijalab.org/seurat/articles/sctransform_v2_vignette.html

```{r}
#| message: false
#| warning: false

# If running on single seurat object or output from merged or integrated qmd

seuratprep <- prepSeuratLoad(seurat)


# if (class(seurat) == "Seurat") { 

#   seuratList <- list(seurat)

#   # If merged or combined will have multiple samples in meta data so save into list as combined seurat
#   if (length(unique(seurat@meta.data$Sample)) > 1) {
      
#     names(seuratList) <- "Combined.Seurat"

#     # Run PrepSCTFindMarkers
#     seuratprep <- lapply(seuratList, PrepSCTFindMarkers)

#   }

#   # If single sample save into list as sample name
#   if (length(unique(seurat@meta.data$Sample)) == 1) {

#     names(seuratList) <- unique(seurat@meta.data$Sample)

#     # If only a single un merged/combined experiment - do not need to run PrepSCTFindMarkers
#     seuratprep <- seuratList

#   }

# } else {

#     # If only list of un merged/combined experiments - do not need to run PrepSCTFindMarkers
#     stopifnot(class(seurat) == "list")
    
#     seuratprep <- seurat
# }
```

## Run Spatially variable features (Trendseek)

An alterative approach to finding features of interest to completing a simple differential expression between groups of interest (either clusters or a priori groups), is to utilise the spatial data that we have to find genes that are distributed in a non-random manner across the tissue samples. To do this we use the Trendseek inspired approach implemented within Seurat.

Please see https://satijalab.org/seurat/articles/spatial_vignette.html for more details and https://www.nature.com/articles/nmeth.4634

::: callout-caution
This approach can take some time to complete and is affected by the number of variable features supplied for testing. Please consider reducing this number for speed up purposes.
:::

::: callout-note
Other selection.methods are available with Seurat such as `moransi` which is used within the Loupe browser from 10x. Please specify above if you wish to change approach. Please note that this approach has not been tested within this notebook.
:::

```{r}
samples <- names(seuratprep)

seuratprep <- lapply(samples, function(x, seuratprep, selection.method, nfeatures, r.metric) {
  
    sv <- FindSpatiallyVariableFeatures(seuratprep[[x]], 
                                        assay = "SCT", 
                                        features = VariableFeatures(seuratprep[[x]])[1:nfeatures], 
                                        selection.method = selection.method, 
                                        r.metric = r.metric)
    seuratprep[[x]] <- sv
    
}, seuratprep = seuratprep, selection.method = params$spatial.method, nfeatures = params$nfeatures, r.metric = params$r.metric)

names(seuratprep) <- samples
```

### Define genes interest

Next we get the top spatially variable features ready for plotting.

```{r}
#| message: false
#| warning: false

top.features <- lapply(seuratprep, SpatiallyVariableFeatures, 
                       selection.method = params$spatial.method, assay = "SCT")
```

### Spatial plots

Below we prepare plots for the top spatially variable genes.

```{r}
#| message: false
#| warning: false

spatialPlots <- lapply(names(seuratprep), function(x, seuratprep, top.features, top) { 

  SpatialFeaturePlot(seuratprep[[x]], 
                     features = head(top.features[[x]],top), 
                     alpha = c(0.1, 1))  + 
    labs(title = x)
  
  }, seuratprep = seuratprep, top.features = top.features, top = params$top.features)

names(spatialPlots) <- names(seuratprep)
```

::: {.panel-tabset}

```{r}
#| fig.width: !expr (params$plot_width + 10)
#| fig.height: !expr (params$plot_height + 13)
#| fig-cap: Spatial plot top spatially variable features.
#| results: "asis"
#| echo: false

sample_names <- names(seuratprep)

for (n in sample_names) {

  cat("####", n, "\n")

  print(spatialPlots[[n]])

  cat('\n\n')
}

```

:::

## ScaleData

A next step we need to take with our pre-processing is scale the data ready for heatmap visualisation. This is a simple subtraction of the mean expression for that gene divided by the sd. This needs to be completed because when we combine samples they will not have a unified scaled data slot.

We complete this process with the `ScaleData` function from seurat. If you wish to regress out additional variables this is possible with the same `ScaleData` function by supplying the variable name as `param$regress`.

Please see https://satijalab.org/seurat/reference/scaledata for more details.

We save the result of this scaling into a new slot named "`[[ScaleData]]`" so not to write over other important normalisation values from SCT normalisation (pearsons residuals).

The seurat object can be a bit tricky and we it can often get confusing what assay or data slot seurat is utilising. If you are interested this handy graphic from Lior pachter describes it pretty well https://twitter.com/lpachter/status/1524413513233575936/photo/1

```{r}
#| message: false
#| warning: false

seuratprep <- lapply(seuratprep, scaleData, regress = params$regress)
```

### DoHeatmap

Below we plot these markers using the heatmap functions supplied by Seurat (DoHeatmap).

```{r}
doheatmaps <- lapply(seuratprep, plotHeatmap, featureList = top.features, 
                     type = "DoHeatmap", legend = FALSE)
```

::: {.panel-tabset}

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Heatmap top spatially variable features.
#| results: "asis"
#| echo: false

sample_names <- names(seuratprep)

for (n in sample_names) {

  cat("####", n, "\n")

  print(doheatmaps[[n]])

  cat('\n\n')
}

```

:::

Below we plot these markers using DoHeatmap with a legend.

```{r}
doheatmapslegend <- lapply(seuratprep, plotHeatmap, featureList = top.features, 
                           type = "DoHeatmap", legend = TRUE)
```

::: {.panel-tabset}

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Heatmap top spatially variable features with legend.
#| results: "asis"
#| echo: false

sample_names <- names(seuratprep)

for (n in sample_names) {

  cat("####", n, "\n")

  print(doheatmapslegend[[n]])

  cat('\n\n')
}

```

:::

# Output

Save experiment object:

```{r}
saveRDS(seuratprep, file = "output/10-spatial-features.rds")
```

### Output Description 

@tbl-outputs

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
File = "seuratprep",
Link = "[seuratprep](../../output/10-spatial-features.rds)",
Description = "Seurat object saved as rds object filtered, normalised, dimensionality reduced, clustered, with PrepSCTFindMarkers run if multiple SCT models present (merged or integrated seurat object), and ScaleData assay added - with Spatially variable features identified with FindSpatiallyVariableFeatures."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

### Session information 

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>
