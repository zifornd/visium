---
title: "Normalisation"
params:
  nfeatures:
    - 2000
  min_cells:
    - 2
  example:
    - "Foxg1"
---

## Setup

### Parameters

@tbl-params Parameter description

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "nfeatures",
Value = params$nfeatures,
Description = "Number of highly variable gene features to use for normalisation."
),
list(
Parameter = "min_cells",
Value = params$min_cells,
Description = "Only use genes that have been detected in at least this many cells; default is 5."
),
list(
Parameter = "example",
Value = params$example,
Description = "Example gene to display model."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

### Dependencies

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Restore project dependencies:

```{r}
#renv::restore()
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
```

Source user-defined functions:

```{r}
source("scripts/normalise.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

## Processing

### Reading in experiment object

We can read in the seurat object that we loaded in from the previous worksheet (See quarto worksheet `02-quality-control.qmd` for more details).

```{r}
seurat <- readRDS("output/02-quality-control.rds")
```

### Feature selection

Feature selection is a standard step for normalisation but in the Seurat SCT approach is wrapped up and automated within the `SCTransform` function. Research has found that this feature selection step
helps to highlight biological signal (https://www.nature.com/articles/nmeth.2645). Below we show the VST approach prior to normalisation to show an example of highly variable features prior to normalisation. Highly variable genes chosen through SCT normalisation are shown at the end of this workflow.

#### VST approach

Here we take the top n highly variable genes.

```{r}
#| label: Find-features-n
#| warning: false
#| message: false

features_n <- bplapply(seurat, findFeatures, nfeatures = params$nfeatures, 
                       BPPARAM = BPPARAM) 
```

@fig-vsthvg Feature plot n highly variable features

```{r}
#| fig.width: 12
#| fig.height: 8
#| fig-cap: Feature plot for variable features with VST method.
#| warning: false
#| message: false
#| label: fig-vsthvg

wrap_plots(lapply(features_n, plotVariableGenes, selection.method = "vst"), 
           ncol = 2)
```

### Normalisation

Using SCT transform we apply normalisation to our samples. This creates a regularized negative binomial models of expression for each gene. It does this to account for technical artifacts while attempting to preserving biological variance.

-   See https://satijalab.org/seurat/reference/sctransform for more details.

As Seurat authors advice each sample to be normalised separately prior to merging here we normalise each sample alone and do not merge.

-   See https://github.com/satijalab/seurat/discussions/4430 GitHub for more details.

```{r}
#| label: Normalise-SCT-features-n
#| warning: false
#| message: false

seurat <- lapply(seurat, normalise, variable.features.n = params$nfeatures, 
                 min_cells = params$min_cells) 
```

Generally speaking the normalisation of single cell and spatial data is hidden away by Seurat - however in this workflow we plot a few of the step for interest sake.

We are following details of sct transform from sctransform::vst vignette

-   See https://htmlpreview.github.io/?https://github.com/satijalab/sctransform/blob/supp_html/supplement/variance_stabilizing_transformation.html for more details

```{r}
#| warning: false
#| message: false

vst_out <- lapply(seurat, normaliseSctransform) 
```

@fig-modelparams Plot model params

```{r}
#| warning: false
#| message: false
#| fig-cap: Plot of SCT model parameters.
#| fig.width: 10
#| fig.height: 5
#| label: fig-modelparams

wrap_plots(lapply(vst_out, sctransform::plot_model_pars, show_theta = TRUE))
```

We can also inspect the model fit on a gene of choice - where we are seeing the regression factor on the x-axis vs. in the top plot the UMI counts, and in the bottom plot the Pearsons residuals.

```{r}
#| warning: false
#| message: false
#| fig.show: hide

print(params$example)

modl <- lapply(seurat, plotModelSctransform, features = c(params$example), 
               vst_outlist = vst_out)
```

@fig-model-ex Plot model for example gene

```{r}
#| fig.width: 5
#| fig.height: 10
#| warning: false
#| message: false
#| fig-cap: Plot SCT model for example gene alongisde pearsons residuals.
#| label: fig-model-ex

wrap_plots(modl)
```

Finally after transformation where there is no relationship between mean and variance we can take the most variable genes by sorting by residual variance - as this plot shows.

@fig-resvar-sct Feature plot as per SCT

```{r}
#| fig.width: 12
#| fig.height: 8
#| warning: false
#| message: false
#| fig-cap: Variable feature plot as per SCT normalisation.
#| label: fig-resvar-sct

wrap_plots(lapply(seurat, plotVariableGenes, selection.method = "sct"), ncol = 2)
```

## Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/03-normalisation.rds")
```

### Output Description 

@tbl-outputs

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
Parameter = "seurat",
Value = "[seurat](../../output/03-normalisation.rds)",
Description = "Seurat object saved as rds object filtered and normalised."
)

)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

### Session information 

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>
