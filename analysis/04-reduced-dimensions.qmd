---
title: "Reduced Dimensions"
params: 
  elbow_range: ["1:20", "1:20", "1:20", "1:20"]
  elbow_plot: [10, 30]
  n.neighbors:
    - 30
  min.dist: 
    - 0.3
  perplexity: 
    - "N^1/2"
  plot_width: 
    - 8
  plot_height: 
    - 4
---

# Setup

## Parameters

```{r}
#| code-fold: true
#| label: tbl-params
#| tbl-cap: Description of paramaters used in notebook.

par <- list(

list(
Parameter = "elbow_range",
Value = params$elbow_range,
Description = "Number of PCs used for reduced dimension analysis."
),
list(
Parameter = "elbow_plot",
Value = params$elbow_plot,
Description = "Plot params for elbow plot - upper and lower bounds"
),
list(
Parameter = "n.neighbors",
Value = params$n.neighbors,
Description = "Chosen n.neighbors param for UMAP."
),
list(
Parameter = "min.dist",
Value = params$min.dist,
Description = "Chosen min.dist param for UMAP."
),
list(
Parameter = "perplexity",
Value = params$perplexity,
Description = "Chosen perplexity param for TSNE."
)
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

::: callout-tip
You can supply these paramaters upon render.
:::

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockNamedep"> Show/Hide Dependencies</button>  

<div id="BlockNamedep" class="collapse">  

## Dependencies

Restore project dependencies:

```{r}
renv::restore()
```

Add child documents

```{r}
#| child = "analysis/big-data.qmd"
```

Load Bioconductor packages:

```{r}
#| message: false
#| warning: false

library(Seurat)
```

Load CRAN packages:

```{r}
#| message: false
#| warning: false

library(patchwork)
library(ggplot2)
library(dplyr)
library(reshape2)
library(viridis)
library(plyr)
```

Source user-defined functions:

```{r}
#| message: false
#| warning: false

source("scripts/reduceDims.R")
```

::: callout-note
Much of the visium quarto workflow include Rscripts which are not part of a external library but are sourced at the start of each workflow. Each script is stored within `scripts/`. Please see the start of each .qmd file for the details of which scripts have been sourced.
:::

</div>

# Processing

## Reading in experiment object

We can read in the seurat object that we loaded in from the previous worksheet (See quarto worksheet `03-normalisation.qmd` for more details).

```{r}
#| message: false
#| warning: false

seurat <- readRDS("output/03-normalisation.rds")
```

## PCA

Due to existence of abundant technical noise in any single gene feature for single cell and spatial data - it is common practice to perform dimensionality reduction and clustering using the top principal components from principal component analysis (PCA). This sees each principal component (PC) as a metafeature or metagene which summarises information across a number of correlated gene features maximising biological signal.

Below we perform PCA on each seurat object:

```{r}
#| message: false
#| warning: false

seurat <- bplapply(seurat, pca, BPPARAM = BPPARAM)
```

### Plot PCAs

Next we plot our PCA and overlay a number of additional pieces of information which are often useful - PCA coloured by `Group`, by `nCount_Spatial`, and `nFeature_Spatial`.

It can also be a very useful exploratory data analysis step to look at the PCA coloured by QC values such as overall counts (`nCount_Spatial`) and number of features per spot (`nFeature_Spatial`). The idea here is that a cluster may be driven by a technical reason such as a difference in library size which could be amenable to normalisation approaches. As standard we plot the `Group` which comes from the sample table - however other things like a known batch could be plotted as a labelled PCA plot for diagnosis of potential batch effects (if they exist within the seurat meta data). 

Below we plot the first two components of the PCA that we completed on each seurat object coloured by `Group`.

```{r}
#| message: false
#| warning: false
#| results: hide

pca_plots_dim <- lapply(seurat, dimplot, reduction = "pca", label = FALSE, 
                        group.by = "Group")
```


Below we plot the first two components of the PCA that we completed on each seurat object coloured by `nCount_Spatial`.

```{r}
#| message: false
#| warning: false
#| results: hide

pca_plots_feature1 <- lapply(seurat, featureplot, reduction = "pca", 
                            label = FALSE, feature = "nCount_Spatial")
```


Below we plot the first two components of the PCA that we completed on each seurat object coloured by `nFeature_Spatial`.

```{r}
#| message: false
#| warning: false
#| results: hide

pca_plots_feature2 <- lapply(seurat, featureplot, reduction = "pca", 
                            label = FALSE, feature = "nFeature_Spatial")
```

We visualise these PCA plots below:

::: {.panel-tabset}

## PCA Groups

@fig-pca-group Wrap plot PCAs dimplots

```{r}
#| results: "asis"
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plots by group.
#| label: fig-pca-group

wrap_plots(pca_plots_dim, ncol = 2)
```

## PCA nCount

@fig-pca-ncount Wrap plot PCAs featureplot ncount

```{r}
#| results: "asis"
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plots by nCount.
#| label: fig-pca-ncount

wrap_plots(pca_plots_feature1, ncol = 2)
```

## PCA nFeature

@fig-pca-nfeature Wrap plot PCAs featureplot nfeature

```{r}
#| results: "asis"
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: PCA plots by nFeature.
#| label: fig-pca-nfeature

wrap_plots(pca_plots_feature2, ncol = 2)
```
:::


## Finding dimensionality of dataset

Although we know that using the top PCs from PCA improves downstream analysis and overcomes technical noise of single cell and spatial data we do not know how many PCs to choose. A simple way to do this is to perform a heuristic method by generating an Elbow plot by ranking the PCs by % variance that each explains and finding the "elbow" in which variance ceases to decrease. At this elbow the majority true biological signal is captured.

### Elbow plot

Below we plot the variance of the top components as an elbow plot

```{r}
#| message: false
#| warning: false

elbows <- lapply(seurat, elbow, vline1 = params$elbow_plot[[1]], vline2 = params$elbow_plot[[2]])
```

@fig-elbow Elbow plot

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: Elbow plot.
#| label: fig-elbow

wrap_plots(elbows, ncol = 2)
```

::: callout-note
Please take the number of PCs (e.g. `1:20`) you want as inferred from inspecting the elbow plot and rerun this workflow with the `elbow_range` parameter reset for your needs. See @tbl-params for details. We advise to take a larger PC number than the exact elbow visualised.
:::

Below we take number of PCs from visual inspection defined by the parameter elbow vector: `r params$elbow_range`

```{r}
#| warning: false

elbow_vector <- params$elbow_range

names(elbow_vector) <- names(seurat)
```

And we add that information to the seurat object

```{r}
#| message: false
#| warning: false

seurat <- lapply(seurat, addElbow, elbow_vector = elbow_vector)
```

## UMAP

Although PCA does a good first job of initial dimensionality reduction it cannot preserve local structure of the data (clusters), it gets affected easily by outliers, and it cannot capture non linear dependencies. We therefore want to use a non-linear dimensionality reduction technique which can best capture and visualise clusters of similar tissue anatomy. Borrowing from single cell RNA-seq we use either Uniform Manifold Approximation and Projection (**UMAP**) or T-distributed stochastic neighbourhood embedding (**t-SNE**) approaches. Generally we favor UMAP due to its faster run time.

Unlike PCA these approaches have hyperparameters (e.g. perplexity and t-SNE), and these can be tweaked to affect the outcome of the plot. It is therefore important to explore this parameter space, at least quickly, to ensure the dimensionality reduction you have is a representative one.

Below we explore the parameter space of both UMAP and t-SNE approaches in a non-exhaustive manner.

### Test stability of UMAP params

For UMAP hyperparams of importance are n.neighbors and min.dist. n.neighbors should be in the range 5 to 50, and min.dist sensible values are in the range 0.001 to 0.5.

Below we run UMAP across seurat objects for these parameters.

```{r}
#| message: false
#| warning: false
#| label: Explore-Features-UMAP

seurat_1 <- bplapply(seurat, umap, n.neighbors = 30, min.dist = 0.3, BPPARAM = BPPARAM)

seurat_2 <- bplapply(seurat, umap, n.neighbors = 5, min.dist = 0.25, BPPARAM = BPPARAM)

seurat_3 <- bplapply(seurat, umap, n.neighbors = 10, min.dist = 0.1, BPPARAM = BPPARAM)

seurat_4 <- bplapply(seurat, umap, n.neighbors = 20, min.dist = 0.1, BPPARAM = BPPARAM)

seurat_5 <- bplapply(seurat, umap, n.neighbors = 10, min.dist = 0.001, BPPARAM = BPPARAM)
```

::: {.panel-tabset}

## n.n 30 min.dist 0.3

@fig-umap-30-03 Plot UMAP n.neighbors = 30, min.dist = 0.3

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP n.neighbors = 30, min.dist = 0.3.
#| label: fig-umap-30-03

wrap_plots(lapply(seurat_1, dimplot, reduction = "umap", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## n.n 5 min.dist 0.25

@fig-umap-05-025 Plot UMAP n.neighbors = 5, min.dist = 0.25

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP n.neighbors = 5, min.dist = 0.25.
#| label: fig-umap-05-025

wrap_plots(lapply(seurat_2, dimplot, reduction = "umap", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## n.n 10 min.dist 0.1

@fig-umap-10-01 Plot UMAP n.neighbors = 10, min.dist = 0.1

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP n.neighbors = 10, min.dist = 0.1.
#| label: fig-umap-10-01

wrap_plots(lapply(seurat_3, dimplot, reduction = "umap", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## n.n 20 min.dist 0.1

@fig-umap-20-01 Plot UMAP n.neighbors = 20, min.dist = 0.1

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP n.neighbors = 20, min.dist = 0.1.
#| label: fig-umap-20-01

wrap_plots(lapply(seurat_4, dimplot, reduction = "umap", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## n.n 10 min.dist 0.001

@fig-umap-10-0001 Plot UMAP n.neighbors = 10, min.dist = 0.001

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP n.neighbors = 10, min.dist = 0.001.
#| label: fig-umap-10-0001

wrap_plots(lapply(seurat_5, dimplot, reduction = "umap", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```
:::

Clean up workspace

```{r}
rm(seurat_1, seurat_2, seurat_3, seurat_4, seurat_5)
gc()
```

### Plot UMAP

::: callout-note
Please take the values for `n.neighbors` and `min.dist` that are representative across UMAP plots and set them as params @tbl-params.
:::

Below we run UMAP with the paramaters of choice n.neighbors: `r params$n.neighbors` and min.dist: `r params$min.dist`.

```{r}
#| warning: false

seurat <- bplapply(seurat, umap, n.neighbors = params$n.neighbors, 
                   min.dist = params$min.dist, BPPARAM = BPPARAM)
```

As in PCA plotting it can also be a very useful exploratory data analysis step to look at the UMAP coloured by QC values such as overall counts (`nCount_Spatial`) and number of features per spot (`nFeature_Spatial`). The idea here is that a cluster may be driven by a technical reason such as a difference in library size which could be amenable to normalisation approaches - or should be interpreted with caution downstream (some biological regions are also known to reliably have low counts and this may be evident). As standard we plot the `Group` which comes from the sample table - however other things like a known batch could also be plotted as a labelled UMAP plot if it is within the seurat meta data object.

Below we plot the UMAP of choice n.neighbors: `r params$n.neighbors` and min.dist: `r params$min.dist`. Coloured by `Group`.

```{r}
#| message: false
#| warning: false
#| results: hide

umap_plots <- lapply(seurat, dimplot, reduction = "umap", 
                     label = FALSE, group.by = "Group")
```

Below we plot a UMAP with chosen params coloured by `nCount_Spatial`.

```{r}
#| message: false
#| warning: false
#| results: hide

umap_plots_feature1 <- lapply(seurat, featureplot, reduction = "umap", 
                             label = FALSE, feature = "nCount_Spatial")
```

Below we plot a UMAP with chosen params coloured by `nFeature_Spatial`.

```{r}
#| message: false
#| warning: false
#| results: hide

umap_plots_feature2 <- lapply(seurat, featureplot, reduction = "umap", 
                             label = FALSE, feature = "nFeature_Spatial")
```

We visualise these PCA plots below:

::: {.panel-tabset}

## UMAP Group

@fig-umap-choice Plot UMAP of choice

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP chosen params
#| label: fig-umap-choice

wrap_plots(umap_plots, ncol = 2)
```

## UMAP nCount

@fig-umap-chosen-ncounts Wrap plot UMAP featureplot nCounts

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP chosen params nCounts
#| label: fig-umap-chosen-ncounts

wrap_plots(umap_plots_feature1, ncol = 2)
```

## UMAP nFeature

@fig-umap-chosen-nfeatures Wrap plot UMAP featureplot nFeatures

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: UMAP chosen params nCounts
#| label: fig-umap-chosen-nfeatures

wrap_plots(umap_plots_feature2, ncol = 2)
```
:::

## TSNE

### Test stability of TSNE params

For t-SNE hyperparams of importance are perplexity. perplexity parameter (should not be bigger than 3 \* perplexity \< nrow(X) - 1) NB: Try N\^1/2 as rule of thumb.

Below we run TSNE across seurat objects for these parameters.

```{r}
#| label: Explore-Features-TSNE-N1-2
#| warning: false
#| message: false

seurat_1 <- bplapply(seurat, tsne, perplexity = "N^1/2", BPPARAM = BPPARAM)
```

```{r}
#| label: Explore-Features-TSNE
#| warning: false
#| message: false

seurat_2 <- bplapply(seurat, tsne, perplexity = 5, BPPARAM = BPPARAM)

seurat_3 <- bplapply(seurat, tsne, perplexity = 10, BPPARAM = BPPARAM)

seurat_4 <- bplapply(seurat, tsne, perplexity = 20, BPPARAM = BPPARAM)

seurat_5 <- bplapply(seurat, tsne, perplexity = 100, BPPARAM = BPPARAM)
```

::: {.panel-tabset}

## perplexity = N\^1/2

@fig-tsne-n12 Plot perplexity = N\^1/2

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE perplexity = N^1/2
#| label: fig-tsne-n12

wrap_plots(lapply(seurat_1, dimplot, reduction = "tsne", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## perplexity = 5

@fig-tsne-5 Plot perplexity = 5

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE perplexity = 5
#| label: fig-tsne-5

wrap_plots(lapply(seurat_2, dimplot, reduction = "tsne", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## perplexity = 10

@fig-tsne-10 Plot perplexity = 10

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE perplexity = 10
#| label: fig-tsne-10

wrap_plots(lapply(seurat_3, dimplot, reduction = "tsne", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## perplexity = 20

@fig-tsne-20 Plot perplexity = 20

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE perplexity = 20
#| label: fig-tsne-20

wrap_plots(lapply(seurat_4, dimplot, reduction = "tsne", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```

## perplexity = 100

@fig-tsne-100 Plot perplexity = 100

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE perplexity = 100
#| label: fig-tsne-100

wrap_plots(lapply(seurat_5, dimplot, reduction = "tsne", 
                  label = FALSE, group.by = "Group"), ncol = 2)
```
:::

Clean up workspace

```{r}
rm(seurat_1, seurat_2, seurat_3, seurat_4, seurat_5)
gc()
```

### Plot TSNE

::: callout-note
Please take the values for `perplexity` that are representative across TSNE plots and set them as params @tbl-params.
:::

Below we run TSNE with the paramaters of choice perplexity: `r params$perplexity`.

```{r}
#| warning: false

seurat <- bplapply(seurat, tsne, perplexity = params$perplexity, BPPARAM = BPPARAM)
```

As in UMAP plotting we will also complete an exploratory data analysis step and colour the UMAP by QC values such as overall counts (`nCount_Spatial`) and number of features per spot (`nFeature_Spatial`).

Below we plot each individual TSNE coloured by `Group`.

```{r}
#| warning: false
#| message: false
#| results: hide

tsne_plots <- lapply(seurat, dimplot, reduction = "tsne", 
                     label = FALSE, group.by = "Group")
```

Below we plot a TSNE with chosen params coloured by `nCount_Spatial`.

```{r}
#| warning: false
#| message: false
#| results: hide

tsne_plots_feature1 <- lapply(seurat, featureplot, reduction = "tsne", 
                             label = FALSE, feature = "nCount_Spatial")
```

Below we plot a TSNE with chosen params coloured by `nFeature_Spatial`.

```{r}
#| warning: false
#| message: false
#| results: hide

tsne_plots_feature2 <- lapply(seurat, featureplot, reduction = "tsne", 
                             label = FALSE, feature = "nFeature_Spatial")
```

::: {.panel-tabset}

## TSNE Group

@fig-tsne-chosen Wrap plot TSNE

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE chosen params.
#| label: fig-tsne-chosen

wrap_plots(tsne_plots, ncol = 2)
```

## TSNE nCount

@fig-tsne-chosen-ncounts Wrap plot TSNE featureplot ncounts

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE chosen params nCounts.
#| label: fig-tsne-chosen-ncounts

wrap_plots(tsne_plots_feature1, ncol = 2)
```

## TSNE nFeature

@fig-tsne-chosen-nfeatures Wrap plot TSNE featureplot nfeatures

```{r}
#| fig.width: !expr params$plot_width
#| fig.height: !expr params$plot_height
#| fig-cap: TSNE chosen params nFeatures.
#| label: fig-tsne-chosen-nfeatures

wrap_plots(tsne_plots_feature2, ncol = 2)
```
:::

# Output

Save experiment object:

```{r}
saveRDS(seurat, file = "output/04-reduced-dimensions.rds")
```

## Output Description 

```{r}
#| code-fold: true
#| label: tbl-outputs
#| tbl-cap: Description of outputs created.

par <- list(

list(
File = "seurat",
Link = "[seurat](../../output/04-reduced-dimensions.rds)",
Description = "Seurat object saved as rds object filtered and normalised with dimensionality reduction completed."
)

)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

## Session information 

Print session information:

<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#BlockName"> Show/Hide </button>  

<div id="BlockName" class="collapse">  

```{r}
#| code-fold: false
sessionInfo()
```

</div>
